<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on </title>
    <link>https://zacharyloeber.com/tags/powershell/</link>
    <description>Recent content in Powershell on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 03 May 2018 02:29:53 +0000</lastBuildDate>
    
	<atom:link href="https://zacharyloeber.com/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Powershell To Python Notes From The Field</title>
      <link>https://zacharyloeber.com/blog/2018/05/02/powershell-to-python-notes-from-the-field/</link>
      <pubDate>Thu, 03 May 2018 02:29:53 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2018/05/02/powershell-to-python-notes-from-the-field/</guid>
      <description>Have a PowerShell background and want to learn Python? Here is a good kickstart article to point you in the right direction.</description>
    </item>
    
    <item>
      <title>PowerShell: Windows Subsystem For Linux</title>
      <link>https://zacharyloeber.com/blog/2018/03/26/powershell-windows-subsystem-for-linux/</link>
      <pubDate>Mon, 26 Mar 2018 13:49:26 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2018/03/26/powershell-windows-subsystem-for-linux/</guid>
      <description>I&amp;#8217;ve delved into Windows Subsystem for Linux recently and wrote an article on the topic here. Included is a script to automatically install your chosen WSL ditribution. Check it out!</description>
    </item>
    
    <item>
      <title>PowerShell: AzureAD Dynamic Groups</title>
      <link>https://zacharyloeber.com/blog/2018/02/04/powershell-azuread-dynamic-groups/</link>
      <pubDate>Sun, 04 Feb 2018 17:36:57 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2018/02/04/powershell-azuread-dynamic-groups/</guid>
      <description>&lt;p&gt;A few code snippets for Azure AD dynamic groups. One for creating standard groups for your environment. Another for finding duplicates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: Office 365 Group Based Licencing Cleanup</title>
      <link>https://zacharyloeber.com/blog/2018/01/10/powershell-office-365-group-based-licencing-cleanup/</link>
      <pubDate>Thu, 11 Jan 2018 03:35:52 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2018/01/10/powershell-office-365-group-based-licencing-cleanup/</guid>
      <description>&lt;p&gt;A script to remove directly assigned licenses from user accounts if they overlap with group assigned licenses in Office 365.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud PBX: Polycom VVX Master Directory</title>
      <link>https://zacharyloeber.com/blog/2017/09/10/cloud-pbx-polycom-vvx-master-directory/</link>
      <pubDate>Sun, 10 Sep 2017 20:38:59 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2017/09/10/cloud-pbx-polycom-vvx-master-directory/</guid>
      <description>&lt;p&gt;Reverse number lookup in Skype for Business online (cloud PBX) doesn&amp;#8217;t give you much control. If you are deploying Polycom VVX phones you can get around this with a directory file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: Inheriting Parameters (Proxy Functions)</title>
      <link>https://zacharyloeber.com/blog/2017/07/30/powershell-inheriting-parameters-proxy-functions/</link>
      <pubDate>Sun, 30 Jul 2017 14:23:36 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2017/07/30/powershell-inheriting-parameters-proxy-functions/</guid>
      <description>&lt;p&gt;If you want one function to have all the parameters of another function here is one method you could use.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: Easy Module Authoring with ModuleBuild</title>
      <link>https://zacharyloeber.com/blog/2017/07/04/powershell-easy-module-authoring-with-modulebuild/</link>
      <pubDate>Wed, 05 Jul 2017 01:29:53 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2017/07/04/powershell-easy-module-authoring-with-modulebuild/</guid>
      <description>&lt;p&gt;I’ve previously discussed using the excellent plaster module for creating new modules among other things. Now I’ve integrated plaster into my PSModuleBuild project, turned the whole thing into a module, and changed the name to just ‘ModuleBuild’&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Creating Plaster Manifest Files</title>
      <link>https://zacharyloeber.com/blog/2017/05/15/powershell-creating-plaster-manifest-files/</link>
      <pubDate>Mon, 15 May 2017 17:49:48 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2017/05/15/powershell-creating-plaster-manifest-files/</guid>
      <description>&lt;p&gt;I&amp;#8217;ve kicked the tires on a great PowerShell code scaffolding tool called &amp;#8216;Plaster&amp;#8217;. Here is my take on this nifty module.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: New Project – OhMyPsh</title>
      <link>https://zacharyloeber.com/blog/2017/03/06/powershell-new-project-ohmypsh/</link>
      <pubDate>Tue, 07 Mar 2017 03:05:19 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2017/03/06/powershell-new-project-ohmypsh/</guid>
      <description>&lt;p&gt;A PowerShell 5.0 terminal experience with lots of smart features that make you look cool at the command line.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: PowerShellGet Helper Functions</title>
      <link>https://zacharyloeber.com/blog/2016/12/21/powershell-powershellget-helper-functions/</link>
      <pubDate>Wed, 21 Dec 2016 21:21:12 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/12/21/powershell-powershellget-helper-functions/</guid>
      <description>&lt;p&gt;With the PowerShell Gallery at your fingertips in PowerShell v5 you are able to find and install modules and scripts quickly. Here are a few helper functions you may want to add to your profile to help automate some of these tasks.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: PSCloudflare Module</title>
      <link>https://zacharyloeber.com/blog/2016/12/03/powershell-pscloudflare-module/</link>
      <pubDate>Sat, 03 Dec 2016 16:27:51 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/12/03/powershell-pscloudflare-module/</guid>
      <description>&lt;p&gt;A well documented API without a PowerShell Module is like an itch begging to be scratched.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: New-ADPasswordReminder</title>
      <link>https://zacharyloeber.com/blog/2016/10/13/powershell-new-adpasswordreminder/</link>
      <pubDate>Thu, 13 Oct 2016 19:03:55 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/10/13/powershell-new-adpasswordreminder/</guid>
      <description>&lt;p&gt;A single, self-extracting, self-scheduling, AD password change notice PowerShell script.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OSS PowerShell: Platform Independent Functions</title>
      <link>https://zacharyloeber.com/blog/2016/08/20/oss-powershell-platform-independent-functions/</link>
      <pubDate>Sun, 21 Aug 2016 03:41:03 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/08/20/oss-powershell-platform-independent-functions/</guid>
      <description>&lt;p&gt;Just the other day Microsoft released PowerShell as open source with builds available for Windows, Mac OSX, and a few flavors of Linux. I’m pretty certain the entire community is super hyped at the news. I know I am!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: New Project – PSModuleBuild</title>
      <link>https://zacharyloeber.com/blog/2016/07/31/powershell-new-project-psmodulebuild/</link>
      <pubDate>Mon, 01 Aug 2016 02:34:55 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/07/31/powershell-new-project-psmodulebuild/</guid>
      <description>&lt;p&gt;I’ve spent a little bit of time thinking about and putting together a proper build script for one of my projects. This post covers the decisions I made and technologies I used to get this set this up.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: My Profile</title>
      <link>https://zacharyloeber.com/blog/2016/05/04/powershell-my-profile/</link>
      <pubDate>Thu, 05 May 2016 02:31:54 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/05/04/powershell-my-profile/</guid>
      <description>&lt;p&gt;I&amp;#8217;m always interested to see how other people setup their working environment or get things done. But rarely do I share my own environment. Since I&amp;#8217;m putting the effort into pushing my scripting environment publicly to github I may as well explain a bit more about some of what I&amp;#8217;ve setup.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Office 365: Some Scripts</title>
      <link>https://zacharyloeber.com/blog/2016/04/19/office-365-some-scripts/</link>
      <pubDate>Tue, 19 Apr 2016 21:25:58 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/04/19/office-365-some-scripts/</guid>
      <description>&lt;p&gt;Hello again world, it sure has been a while since I’ve last written to nameless masses. I’ve got some new scripts to share for those who are interested.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Make Pretty Scripts..With Scripts</title>
      <link>https://zacharyloeber.com/blog/2015/10/15/powershell-make-pretty-scripts-with-scripts/</link>
      <pubDate>Thu, 15 Oct 2015 17:58:07 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/10/15/powershell-make-pretty-scripts-with-scripts/</guid>
      <description>&lt;p&gt;I released a new module for standardizing and beautifying your PowerShell code. Aside from code indentation it also can reduce line length, replace here-strings, and a whole lot more.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: Thoughts on Module Design</title>
      <link>https://zacharyloeber.com/blog/2015/10/03/powershell-thoughts-on-module-design/</link>
      <pubDate>Sat, 03 Oct 2015 18:57:04 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/10/03/powershell-thoughts-on-module-design/</guid>
      <description>&lt;p&gt;I&amp;#8217;ve finally decided to grow up and start making modules out of my rather large PowerShell code base. Here are a few things I&amp;#8217;ve learned.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: Comment Based Help Generation</title>
      <link>https://zacharyloeber.com/blog/2015/10/02/powershell-comment-based-help-generation/</link>
      <pubDate>Sat, 03 Oct 2015 02:30:06 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/10/02/powershell-comment-based-help-generation/</guid>
      <description>&lt;p&gt;Here is a quick couple of functions I put together which will use AST to pull all the functions, their parameters, and associated parameter attributes and create a template comment based help from the results.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Stop Email Exfiltration</title>
      <link>https://zacharyloeber.com/blog/2015/09/24/excxhange-stop-email-exfiltration/</link>
      <pubDate>Fri, 25 Sep 2015 01:41:25 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/09/24/excxhange-stop-email-exfiltration/</guid>
      <description>&lt;p&gt;When your users leave or get removed from the organization they may still be getting company confidential information. Here is how you can find out and stop this from happening.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: ASTExplorer</title>
      <link>https://zacharyloeber.com/blog/2015/07/27/powershell-astexplorer/</link>
      <pubDate>Mon, 27 Jul 2015 16:27:55 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/07/27/powershell-astexplorer/</guid>
      <description>&lt;p&gt;So I&amp;#8217;ve been working with PowerShell and abstract syntax trees as of late. Here is a tool I wish I had at my disposal when i started with all this. It takes your script, loads all the AST elements into a treeview, lists properties as each AST element is selected in the treeview, and highlights the portion of the script the element represents.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Login As Batch Job Security Rights</title>
      <link>https://zacharyloeber.com/blog/2015/07/17/powershell-login-as-batch-job-security-rights/</link>
      <pubDate>Sat, 18 Jul 2015 04:09:12 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/07/17/powershell-login-as-batch-job-security-rights/</guid>
      <description>Here is a quick bit of PowerShell. It is some snippets of C# code wrapped up with PowerShell which will allow you to assign accounts to the &amp;#8216;login as batch job&amp;#8217; local security rights of a local machine. The code is no great shakes but it is a good example of how you might take some existing online code and modify to suit your needs in PowerShell. This function also compliments another script I&amp;#8217;ve released in the past for automatically scheduling PowerShell scheduled tasks rather well.</description>
    </item>
    
    <item>
      <title>Exchange: Database Leveling Redux</title>
      <link>https://zacharyloeber.com/blog/2015/04/06/exchange-database-leveling-redux/</link>
      <pubDate>Tue, 07 Apr 2015 00:12:33 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/04/06/exchange-database-leveling-redux/</guid>
      <description>&lt;p&gt;Some time ago I &lt;a href=&#34;https://zacharyloeber.com/2014/01/07/exchange-20102013-database-leveling-script/&#34;&gt;tackled the challenge&lt;/a&gt; of constructing a variant of the bin packing algorithm for leveling out Exchange databases&amp;#8217; size with the least amount of mailbox migrations necessary. Since then, I&amp;#8217;ve been approached by a few people in dreadfully large environments looking for help with errors and compatibility issues around the script I released. I&amp;#8217;ve finally rounded back to this script to do it some justice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync 2013: Scripting QoS Config on Edge Servers</title>
      <link>https://zacharyloeber.com/blog/2015/04/04/lync-2013-scripting-qos-config-on-edge-servers/</link>
      <pubDate>Sat, 04 Apr 2015 21:41:51 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/04/04/lync-2013-scripting-qos-config-on-edge-servers/</guid>
      <description>&lt;p&gt;In many environments the Lync 2013 edge servers are configured in a standalone workgroup without any easy method for setting standard policies (such as GPOs). To make QoS configuration a bit less manual and error prone I&amp;#8217;ve put together this script which can be run in an administrative powershell prompt. It will update the NLA setting (or create it if it doesn&amp;#8217;t already exist), backup and prompt for removal any existing Qos settings, then import the registry settings for Audio, Video, and App QoS settings as defined in the script parameters.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: WPF/Treeview OU Selection Dialog</title>
      <link>https://zacharyloeber.com/blog/2015/03/22/powershell-wpftreeview-ou-selection-dialog/</link>
      <pubDate>Sun, 22 Mar 2015 16:13:54 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/03/22/powershell-wpftreeview-ou-selection-dialog/</guid>
      <description>&lt;p class=&#34;projectSummary&#34;&gt;
  This is a self-contained organizational unit selection dialog box using powershell, xaml, wpf, and ADSI. Should be useful in any number of one off Powershell projects I imagine.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync Client: Automatic Fortune Cookie Utility</title>
      <link>https://zacharyloeber.com/blog/2015/02/08/lync-client-automatic-fortune-cookie-utility/</link>
      <pubDate>Sun, 08 Feb 2015 23:30:30 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/02/08/lync-client-automatic-fortune-cookie-utility/</guid>
      <description>&lt;p&gt;Here&amp;#8217;s a just for fun powershell script for the Lync user. In the not so old days of Unix administration it was not too uncommon to have a &amp;#8216;&lt;a href=&#34;http://en.wikipedia.org/wiki/Fortune_%28Unix%29&#34;&gt;fortune cookie&amp;#8217; display when logging into a system&lt;/a&gt;. I’ve always thought that it would be neat to have something similar in the Lync client that would allow for an easy rotation of your personal note field. Little did I realize how easy it would be to add such functionality myself with some powershell and the Lync SDK!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Get-iQuote</title>
      <link>https://zacharyloeber.com/blog/2015/02/08/powershell-get-iquote/</link>
      <pubDate>Sun, 08 Feb 2015 15:46:49 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/02/08/powershell-get-iquote/</guid>
      <description>&lt;p&gt;While scratching an itch I found a cool little site that has a simple to use REST api for returning random quotes from multiple categories. Here is a small function which utilizes this online source to pull quotes from the web!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Check For Misplaced Certificates</title>
      <link>https://zacharyloeber.com/blog/2014/12/10/powershell-check-for-misplaced-certificates/</link>
      <pubDate>Thu, 11 Dec 2014 03:02:28 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/12/10/powershell-check-for-misplaced-certificates/</guid>
      <description>&lt;p&gt;Here is a script I absentmindedly put together one evening while power watching a TV series on Netflix with the wife. The general idea of this script is to check local machine, trusted root, and intermediate trusted root stores for misplaced or duplicate certificates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2013: Server Component State Script</title>
      <link>https://zacharyloeber.com/blog/2014/12/08/exchange-2013-server-component-state-script/</link>
      <pubDate>Tue, 09 Dec 2014 01:28:23 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/12/08/exchange-2013-server-component-state-script/</guid>
      <description>&lt;p&gt;Exchange 2013 includes some powershell commands which allow you to set and view several components in the messaging infrastructure. This is important to be aware of as it means all Exchange related services can be running when looking at them in service manager (services.msc) but not actually doing anything. I went ahead put together a script to better gather this information for administrators.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync: Voice Route Diagram Creation Script</title>
      <link>https://zacharyloeber.com/blog/2014/12/02/lync-voice-route-diagram-creation-script/</link>
      <pubDate>Tue, 02 Dec 2014 18:11:31 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/12/02/lync-voice-route-diagram-creation-script/</guid>
      <description>&lt;p&gt;Lync voice routing boils down to three basic components working in concert to decide call flow. It seems quite simple on paper, you assign voice policies which determine call routes based on PSTN usages (often called the &amp;#8216;glue&amp;#8217;). After looking at Lync voice routing way too many times I finally caved into producing a script to create diagrams of the things over the Thanksgiving holiday weekend.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange Mailbox Auditing with Powershell</title>
      <link>https://zacharyloeber.com/blog/2014/11/24/exchange-mailbox-auditing-with-powershell/</link>
      <pubDate>Tue, 25 Nov 2014 05:55:01 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/11/24/exchange-mailbox-auditing-with-powershell/</guid>
      <description>&lt;p&gt;Some time ago I wrote a script and GUI for performing security audits of Exchange mailbox and calendar rights in an environment. This script was far more popular than I anticipated and, I’m ashamed to say, was rather poorly written by my current Powershell standards. There is an obvious need to simplify the extraction of mailbox permissions or my old script would not still be so popular. So I’ve started to revisit my old code for this project in hopes of remaking it with my PowerShell reporting engine. The first step in this process is to pull out the several bits of code that do the actual rights/permissions extraction. I think I’ve finally got this part done and see no reason not to release this mini-library of functions first.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync UCS Contacts Reporting with Powershell</title>
      <link>https://zacharyloeber.com/blog/2014/11/21/lync-ucs-contacts-reporting-with-powershell/</link>
      <pubDate>Fri, 21 Nov 2014 17:37:30 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/11/21/lync-ucs-contacts-reporting-with-powershell/</guid>
      <description>By default a Lync enabled account within a Lync/Exchange 2013 environment will be enabled for UCS (Unified Contact Store). This means that the Lync contacts get saved in the Lync user&amp;#8217;s mailbox and not the Lync database. In order to get a list of the contacts associated with these accounts you have to export data to a zip file with some debug Lync commands and, even then, the information is buried in a hard to interpret XML file.</description>
    </item>
    
    <item>
      <title>Lync and UM Correlation with Powershell</title>
      <link>https://zacharyloeber.com/blog/2014/11/13/lync-and-um-correlation-with-powershell/</link>
      <pubDate>Fri, 14 Nov 2014 03:31:13 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/11/13/lync-and-um-correlation-with-powershell/</guid>
      <description>I&amp;#8217;ve been working on an Exchange/Lync voice deployment lately and have found a new level of frustration for the lack of connectivity between the several voice components involved in turning up such a solution. That being said it is not very difficult to validate your deployment with a bit of Powershell.
There are a few necessary results to gather where I believe it can be easy to &amp;#8216;miss&amp;#8217; configuration steps when turning up or disabling users:</description>
    </item>
    
    <item>
      <title>PS Quickie: New-PIN</title>
      <link>https://zacharyloeber.com/blog/2014/10/09/ps-quickie-new-pin/</link>
      <pubDate>Fri, 10 Oct 2014 01:09:09 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/10/09/ps-quickie-new-pin/</guid>
      <description>Setting a bunch of PINs for Lync devices is not difficult at all. Here is a script to pre-generate them should you find the need to do so. The function simply generates random digits between 0 and 9 and convert to a string. An exception is made for the first digit (as zeros are often not displayed in csv files when opened in excel) and only digits 1-9 are used.</description>
    </item>
    
    <item>
      <title>Powershell: System Report Script Design</title>
      <link>https://zacharyloeber.com/blog/2014/10/09/powershell-system-report-script-design/</link>
      <pubDate>Thu, 09 Oct 2014 21:29:24 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/10/09/powershell-system-report-script-design/</guid>
      <description>&lt;p&gt;In this post I go back and explain some of my reasoning behind decisions I made in the design of an already released script, &lt;a href=&#34;https://gallery.technet.microsoft.com/Excel-and-HTML-Asset-0ffbf569&#34;&gt;Get-AssetReport&lt;/a&gt;. This was written over a year ago and forgotten about as one of the many unpublished drafts on my blog. The code behind the script I discuss has been upgraded and used in several of my more popular scripts (&lt;a href=&#34;https://gallery.technet.microsoft.com/Active-Directory-Audit-7754a877&#34;&gt;AD Asset Report&lt;/a&gt;, &lt;a href=&#34;https://gallery.technet.microsoft.com/Big-IP-F5-LTM-Load-3fc9a2af&#34;&gt;F5 LTM Report&lt;/a&gt;, and &lt;a href=&#34;https://gallery.technet.microsoft.com/Lync-2013-Mirrored-SQL-132c2f06&#34;&gt;Lync 2013 Status Report&lt;/a&gt;). Some of this content is slightly dated as I&amp;#8217;ve since changed some of the coding but the core concepts are the same. Those digging through my crazy work or learning powershell may get some value from this content so I tidied it up a bit and here it is. Cheers!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Handling Old Log and Other Files</title>
      <link>https://zacharyloeber.com/blog/2014/09/26/exchange-handling-old-log-and-other-files/</link>
      <pubDate>Fri, 26 Sep 2014 19:41:59 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/09/26/exchange-handling-old-log-and-other-files/</guid>
      <description>In Exchange old logs can really build up fast. Not database transaction logs but rather temporary transport, client access, IIS, and other debug related crap that typically default to locations either on your system drive or Exchange install path. Of course, Powershell scripting can provide a decent solution for this problem.
Introduction More than any other version, Exchange 2013 seems to like logging information to disk. By default, much of what gets logged will not auto-rotate (or if it does, it happens infrequently) either so you end up with this slow ticking time-bomb in your environment.</description>
    </item>
    
    <item>
      <title>Update: Get-CalendarPermission</title>
      <link>https://zacharyloeber.com/blog/2014/09/24/update-get-calendarpermission/</link>
      <pubDate>Wed, 24 Sep 2014 17:43:07 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/09/24/update-get-calendarpermission/</guid>
      <description>&lt;p&gt;Going through older code is a bit like looking through an old yearbook or photo album. If the pictures within are old enough you usually end up laughing at how little you recognize yourself and maybe even marvel a bit at how far you have come. This old function I wrote isn’t the worst of my code but I was still able to update it for measurable improvements.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Receive Connector Tango! – Part 2</title>
      <link>https://zacharyloeber.com/blog/2014/08/23/exchange-receive-connector-tango-part-2/</link>
      <pubDate>Sat, 23 Aug 2014 21:20:31 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/08/23/exchange-receive-connector-tango-part-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zacharyloeber.com/2014/07/06/exchange-receive-connector-tango-part-1/&#34;&gt;In part 1 of this series&lt;/a&gt; I discussed some basic knowledge requirements to get a better grip on receive connectors in Exchange. I continue that conversation with some examples of improperly configured connectors and the issues they may cause. I finish up the discussion with a script you can use to scan your environment for such configurations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Auto Batching 2013 Migrations</title>
      <link>https://zacharyloeber.com/blog/2014/07/28/exchange-auto-batching-2013-migrations/</link>
      <pubDate>Mon, 28 Jul 2014 16:48:24 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/07/28/exchange-auto-batching-2013-migrations/</guid>
      <description>&lt;p&gt;Here is a quick script I put together for automatically creating Exchange 2013 mailbox migration batches. This is useful for the final stages of an Exchange 2013 upgrade among other things.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange Log Level GUI Script</title>
      <link>https://zacharyloeber.com/blog/2014/07/06/exchange-log-level-gui-script/</link>
      <pubDate>Mon, 07 Jul 2014 03:30:20 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/07/06/exchange-log-level-gui-script/</guid>
      <description>&lt;p&gt;I ran into a situation recently where I was forced to amp up the Exchange logging levels to further troubleshoot an issue with some pretty specific Exchange components. I found myself wanting a quick GUI to view and set the levels but found none. So I used this as an opportunity to learn a bit about xaml based GUIs and powershell. The result is this simple, but useful, Exchange log level GUI script which was written for Exchange 2013 but should also run on 2010.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Receive Connector Tango! – Part 1</title>
      <link>https://zacharyloeber.com/blog/2014/07/06/exchange-receive-connector-tango-part-1/</link>
      <pubDate>Mon, 07 Jul 2014 03:25:13 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/07/06/exchange-receive-connector-tango-part-1/</guid>
      <description>&lt;p&gt;Exchange receive connectors are often configured incorrectly or worse, insecurely. This is the first of a two part series about Exchange receive connectors and what to look out for when setting them up.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync 2013: The Many QoS Settings</title>
      <link>https://zacharyloeber.com/blog/2014/06/01/lync-2013-the-many-qos-settings/</link>
      <pubDate>Sun, 01 Jun 2014 15:13:00 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/06/01/lync-2013-the-many-qos-settings/</guid>
      <description>&lt;p&gt;There are more than a few QoS settings in Lync 2013. Here is a script which should gather most of them in a human readable format for your convenience.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Update Distribution Group Managers Script</title>
      <link>https://zacharyloeber.com/blog/2014/04/23/exchange-update-distribution-group-managers-script/</link>
      <pubDate>Thu, 24 Apr 2014 00:26:37 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/04/23/exchange-update-distribution-group-managers-script/</guid>
      <description>&lt;p&gt;A small script to automatically update distribution group owners based on an AD security group.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell Tip – Connecting With ADSI to Another Forest</title>
      <link>https://zacharyloeber.com/blog/2014/04/11/powershell-tip-connecting-with-adsi-to-another-forest/</link>
      <pubDate>Fri, 11 Apr 2014 21:17:43 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/04/11/powershell-tip-connecting-with-adsi-to-another-forest/</guid>
      <description>&lt;p&gt;Using a bit of Powershell and ADSI it is pretty easy to connect to another forest. Finding out how to do so is not very clear though. Here is what I came up with to accomplish this task.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Word/Excel Helper Functions</title>
      <link>https://zacharyloeber.com/blog/2014/03/16/powershell-wordexcel-helper-functions/</link>
      <pubDate>Mon, 17 Mar 2014 03:19:39 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/03/16/powershell-wordexcel-helper-functions/</guid>
      <description>&lt;p&gt;Using powershell I wrap up MS Word and Excel COM objects within a custom psobject. This object contains a handful of methods for making docx and xslx creation and manipulation easier.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell Tip: Convert HTML to PDF</title>
      <link>https://zacharyloeber.com/blog/2014/03/07/posh-tip-convert-html-to-pdf/</link>
      <pubDate>Fri, 07 Mar 2014 18:55:35 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/03/07/posh-tip-convert-html-to-pdf/</guid>
      <description>&lt;p&gt;There are no native methods to create a pdf file in Powershell. So I looked into outside sources for converting HTML output to PDF. I ended up using a stand alone dll and some .NET calls to achieve my goal.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell Tip: Save and Load Calculated Property Definitions</title>
      <link>https://zacharyloeber.com/blog/2014/02/09/powershell-tip-save-and-load-calculated-property-definitions/</link>
      <pubDate>Mon, 10 Feb 2014 04:34:49 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/02/09/powershell-tip-save-and-load-calculated-property-definitions/</guid>
      <description>&lt;p&gt;Using Export-CliXML and Import-CliXML (as well as some custom code) you can save calculated properties in a file for later use. Although the need for something like this is rather infrequent the exercise can better familiarize you with multiple Powershell techniques and concepts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell GUI Script Wrapper Utility</title>
      <link>https://zacharyloeber.com/blog/2014/02/02/powershell-gui-script-wrapper-utility/</link>
      <pubDate>Mon, 03 Feb 2014 03:32:39 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/02/02/powershell-gui-script-wrapper-utility/</guid>
      <description>&lt;p&gt;Creating GUIs for your scripts can be a tedious process. That is why I don’t do so for each powershell project I release. Instead of wasting my precious little free time putting together yet another GUI for a one off script I decided to create a tool which will create the GUI scripts for me automatically!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AD Audit Report with Powershell: Part 3</title>
      <link>https://zacharyloeber.com/blog/2014/01/10/ad-audit-report-with-powershell-part-3/</link>
      <pubDate>Sat, 11 Jan 2014 04:16:29 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/01/10/ad-audit-report-with-powershell-part-3/</guid>
      <description>&lt;p&gt;This is my third and final major update to my AD auditing script. This includes a handful of new useful sections such as domain published printers, NPS servers, DHCP servers, as well as SCCM sites and DPs. Other improvements include easier to use script parameters and bug fixes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010/2013: Database Leveling Script</title>
      <link>https://zacharyloeber.com/blog/2014/01/07/exchange-20102013-database-leveling-script/</link>
      <pubDate>Tue, 07 Jan 2014 22:08:16 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/01/07/exchange-20102013-database-leveling-script/</guid>
      <description>&lt;p&gt;It is common to randomly choose mailbox databases when creating or migrating user mailboxes in Exchange. I actually recommend this practice unless you are setting up a tiered user/storage environment. Unfortunately this may result in an unequal distribution of data which, in turn, can result in an environment where mailbox databases are wildly different in size. In this post I will discuss an approach to leveling the databases so they are equal in size by moving mailboxes between them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Big-IP F5 LTM Load Balancer Documentation Script with Powershell</title>
      <link>https://zacharyloeber.com/blog/2014/01/03/big-ip-f5-ltm-load-balancer-documentation-script-with-powershell/</link>
      <pubDate>Fri, 03 Jan 2014 18:11:18 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/01/03/big-ip-f5-ltm-load-balancer-documentation-script-with-powershell/</guid>
      <description>&lt;p&gt;Here is a script I whipped up to perform a report on your Big-IP LTM load balancers using powershell. The report currently includes the virtual servers, pools, and various bits of status information on both. &lt;a href=&#34;https://devcentral.f5.com/d/microsoft-powershell-with-icontrol&#34;&gt;Big-IP iControl modules&lt;/a&gt; are needed (for obvious reasons).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather (and Diagram) Installed Roles and Features With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/12/18/gather-and-diagram-installed-roles-and-features-with-powershell/</link>
      <pubDate>Wed, 18 Dec 2013 18:53:18 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/12/18/gather-and-diagram-installed-roles-and-features-with-powershell/</guid>
      <description>&lt;p&gt;Use this powershell script to gather installed features and roles from remote systems. This uses two wmi classes in an attempt to gather as much information as possible. Win32_ServerFeature will contain roles and their dependencies on systems running Windows 2008 and above. For these systems we can use this hierarchy to also produce pretty diagrams using graphviz and techniques I&amp;#8217;ve exhibited in some of my other scripts (I added this last part in cause it is easy to do, not really certain how useful it is other than maybe exploring the dependencies between windows roles/features).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Charts: Interactive Visualization with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/12/16/google-charts-interactive-visualization-with-powershell/</link>
      <pubDate>Tue, 17 Dec 2013 02:11:52 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/12/16/google-charts-interactive-visualization-with-powershell/</guid>
      <description>&lt;p&gt;In this script I use powershell to gather system volume information which is then converted into a javascript array. This array is fed into the google charts to create a semi-attractive visualization of server disk space utilization in a single html report. Although this approach is a bit unconventional the results are both fun and useful.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync 2013: Monitoring Mirrored SQL Databases With PowerShell</title>
      <link>https://zacharyloeber.com/blog/2013/11/25/lync-2013-monitoring-mirrored-sql-databases-with-powershell/</link>
      <pubDate>Mon, 25 Nov 2013 18:16:24 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/11/25/lync-2013-monitoring-mirrored-sql-databases-with-powershell/</guid>
      <description>&lt;p&gt;In Lync 2013 you are given a powerful new backend redundancy option for your important databases in the form of SQL mirroring. In this article I’ll discuss which services are able to be mirrored, the databases they encompass, and provide a PowerShell script to generate a report on the database mirror status. I also threw in Lync CMS replication and service status sections because it is the civil thing to do&amp;#8230;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather Remote Event Logs With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/10/16/gather-remote-event-logs-with-powershell/</link>
      <pubDate>Wed, 16 Oct 2013 17:01:13 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/10/16/gather-remote-event-logs-with-powershell/</guid>
      <description>About Gather the remote event log information for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems and returns Event Log information for the specified number of past hours. You can view verbose information on each runspace thread in realtime with the -Verbose option.
Version History 1.0.0 &amp;#8211; 10/16/2013
 Initial release  Notes By default 24 hours is what we filter against for the results.</description>
    </item>
    
    <item>
      <title>Retrieve Remote Scheduled Task Information With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/10/06/retrieve-remote-scheduled-task-information-with-powershell/</link>
      <pubDate>Sun, 06 Oct 2013 23:32:48 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/10/06/retrieve-remote-scheduled-task-information-with-powershell/</guid>
      <description>&lt;p&gt;This function uses multiple runspaces with along with COM objects to gather information about the scheduled tasks of remote systems. Getting this to work with alternate credentials may be possible but I wasn’t able to discern a usable method to make it happen so I resorted to PSremoting. What this means is that this script will work against multiple remote systems which do not have psremoting enabled as long as you are running the script with an account that has administrative rights to them. If you do pass a credential to the function then psremoting will be used instead. You can also force psremoting to be used if you are using that across the board in your environment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visualize Active Directory Site Connections</title>
      <link>https://zacharyloeber.com/blog/2013/10/06/visualize-active-directory-site-connections/</link>
      <pubDate>Sun, 06 Oct 2013 22:50:35 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/10/06/visualize-active-directory-site-connections/</guid>
      <description>&lt;h4 id=&#34;span-style-color-bbbbbb-font-size-12px-font-weight-normal-line-height-1-6-in-this-post-i-use-powershell-with-graphviz-to-create-an-active-directory-diagram-of-all-site-connections-between-servers-additionally-i-ve-included-some-code-which-displays-site-connection-options-you-may-be-able-to-use-this-to-find-isolated-dcs-or-just-to-see-a-pretty-diagram-span&#34;&gt;&lt;span style=&#34;color: #bbbbbb; font-size: 12px; font-weight: normal; line-height: 1.6;&#34;&gt;In this post I use powershell with graphviz to create an Active Directory diagram of all site connections between servers. Additionally, I’ve included some code which displays site connection options. You may be able to use this to find isolated DCs or just to see a pretty diagram.&lt;/span&gt;&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>Find Disabled Users With Lync Enabled Without Lync Cmdlts</title>
      <link>https://zacharyloeber.com/blog/2013/09/30/find-disabled-users-with-lync-enabled-without-lync-cmdlts/</link>
      <pubDate>Mon, 30 Sep 2013 21:19:15 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/30/find-disabled-users-with-lync-enabled-without-lync-cmdlts/</guid>
      <description>&lt;p&gt;Here is a quick tip which applies to more than just Lync. I use powershell with .NET ADSI to gather a list of all users which are disabled but still have Lync sip addresses assigned. There are numerous reasons to disable lync on such accounts. One reason would be to make certain that users whom are no longer with the organization get removed from the Lync address list. Another is so these same users can no longer access Lync! (Yes, a disabled AD account may still be authorized to access Lync).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather Remote Command Results With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/19/gather-remote-command-results-with-powershell/</link>
      <pubDate>Thu, 19 Sep 2013 16:22:41 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/19/gather-remote-command-results-with-powershell/</guid>
      <description>&lt;p&gt;Send a remote command using wmi, alternate credentials, and multiple runspaces then retrieve the results serially using mapped secure channels to the remote host. The remote command execution function supports custom timeout parameters in case of wmi problems and returns the remote tmp file information containing the command results. You can view verbose information on each runspace thread in realtime with the -Verbose option.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Get Remote Shadow Volume Information With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/14/get-remote-shadow-volume-information-with-powershell/</link>
      <pubDate>Sun, 15 Sep 2013 02:57:55 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/14/get-remote-shadow-volume-information-with-powershell/</guid>
      <description>&lt;p&gt;Gather the remote shadow volume information for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems and returns shadow volume information, shadow copies, their providers, and settings. You can view verbose information on each runspace thread in realtime with the -Verbose option.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather Local Group Membership With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/11/gather-local-group-membership-with-powershell/</link>
      <pubDate>Wed, 11 Sep 2013 14:11:52 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/11/gather-local-group-membership-with-powershell/</guid>
      <description>Gather system local groups and their members for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems, a switch for inclusion of empty groups in the results, and returns group names with their members. You can view verbose information on each runspace thread in realtime with the -Verbose option.
Version History 1.0.0 &amp;#8211; 09/11/2013
 Initial release  Notes None, this is an independent release of a function I’ve recently included in a larger project.</description>
    </item>
    
    <item>
      <title>Excel and HTML Asset Reports With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/08/excel-and-html-asset-reports-with-powershell/</link>
      <pubDate>Sun, 08 Sep 2013 05:07:29 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/08/excel-and-html-asset-reports-with-powershell/</guid>
      <description>&lt;p&gt;This set of powershell functions collates and generates reports upon system information it gathers. Information gathered includes hardware health, system information, networking information and much much more. Multiple types of html reports can be generated and all data can be exported directly to an excel workbook, saved as individual reports, and emailed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather Remote Installed Programs With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/28/gather-remote-installed-programs-with-powershell/</link>
      <pubDate>Wed, 28 Aug 2013 13:25:22 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/28/gather-remote-installed-programs-with-powershell/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;line-height: 1.6;&#34;&gt;Gather program install information for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems and returns from the registry program name, manufacturer, and uninstall information. You can view verbose information on each runspace thread in realtime with the -Verbose option.&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multithreaded HP Server Health Check with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/22/multithreaded-hp-server-health-check-with-powershell/</link>
      <pubDate>Thu, 22 Aug 2013 17:32:45 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/22/multithreaded-hp-server-health-check-with-powershell/</guid>
      <description>&lt;h2 id=&#34;about&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;This function attempts to query the HP WBEM WMI provider information to ascertain the general health of a physical server. By default just the general health status is returned. Optionally you can include the following components in the results: ethernet teams, array controllers , ethernet adapters, fans, HBAs, power supplies, and temperature sensors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multithreaded Remote Registry Gathering with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/06/multithreaded-remote-registry-gathering-with-powershell/</link>
      <pubDate>Wed, 07 Aug 2013 03:11:49 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/06/multithreaded-remote-registry-gathering-with-powershell/</guid>
      <description>&lt;p&gt;Gather specific subkey values or an entire registry key’s subkey values with powershell and multithreading.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multithreaded System Asset Gathering with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/05/multithreaded-system-asset-gathering-with-powershell/</link>
      <pubDate>Mon, 05 Aug 2013 17:35:31 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/05/multithreaded-system-asset-gathering-with-powershell/</guid>
      <description>&lt;p&gt;This function gathers a plethora of useful system information via WMI and multithreading with powershell.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Determine if a computer is virtual with powershell</title>
      <link>https://zacharyloeber.com/blog/2013/07/26/determine-if-a-computer-is-virtual-with-powershell/</link>
      <pubDate>Fri, 26 Jul 2013 18:22:43 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/07/26/determine-if-a-computer-is-virtual-with-powershell/</guid>
      <description>&lt;p&gt;This function attempts to connect to a computer and find out if it is virtual or not using WMI. If it is virtual, a best guess at the type of virtual platform it is running upon is returned as well.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010 Mailbox Audit Report GUI</title>
      <link>https://zacharyloeber.com/blog/2013/06/28/exchange-2010-mailbox-audit-report-gui/</link>
      <pubDate>Fri, 28 Jun 2013 20:17:29 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/28/exchange-2010-mailbox-audit-report-gui/</guid>
      <description>&lt;p&gt;I’ve updated the original &lt;a href=&#34;https://zacharyloeber.com/2013/05/09/exchange-2010-mailbox-audit-report-script/&#34;&gt;Exchange Mailbox Audit Report Script&lt;/a&gt; with some new features and bug fixes. These updates have also set the stage for the entire script to be wrapped with a GUI! Here is the initial release of the Mailbox Audit Report GUI for your auditing needs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Enhanced Remote Server Connectivity Testing With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/06/25/enhanced-remote-server-connectivity-testing-with-powershell/</link>
      <pubDate>Tue, 25 Jun 2013 14:22:18 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/25/enhanced-remote-server-connectivity-testing-with-powershell/</guid>
      <description>&lt;p&gt;Test the following connectivity methods to a server: RDP, ping, rpc, wsman, sccm agent, scom agent, and remote registry. Optionally an alternate credential can be used. Versatility is added with options to return only true/false when singular tests are performed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use Powershell to Gather Disk/Partition/Mount Point Information</title>
      <link>https://zacharyloeber.com/blog/2013/06/23/use-powershell-to-gather-diskpartitionmount-point-information/</link>
      <pubDate>Mon, 24 Jun 2013 04:41:01 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/23/use-powershell-to-gather-diskpartitionmount-point-information/</guid>
      <description>&lt;p&gt;I put together a function for remotely gathering Windows disk information. This was specifically written to accommodate alternate credentials. This script also accounts for the glaring disconnect between win32_Volume and win32_DiskDrive within WMI.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Audit User Profile Folders With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/06/21/audit-user-profile-folders-with-powershell/</link>
      <pubDate>Fri, 21 Jun 2013 18:46:09 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/21/audit-user-profile-folders-with-powershell/</guid>
      <description>&lt;p&gt;This function will aggregate sub-folders within a folder on a server and attempt to associate them with user IDs within a domain and provide additional information. This script can also be used to move folders for disabled or non-existent accounts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Book Review: PowerShell 3.0 Advanced Administration Handbook</title>
      <link>https://zacharyloeber.com/blog/2013/06/18/book-review-powershell-3-0-advanced-administration-handbook/</link>
      <pubDate>Wed, 19 Jun 2013 01:44:40 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/18/book-review-powershell-3-0-advanced-administration-handbook/</guid>
      <description>&lt;p&gt;A fast-paced PowerShell guide with real-world scenarios and detailed solutions&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use Powershell to Create a Windows Service Dependency Diagrams</title>
      <link>https://zacharyloeber.com/blog/2013/06/17/use-powershell-to-create-a-windows-service-dependency-diagrams/</link>
      <pubDate>Mon, 17 Jun 2013 15:32:42 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/17/use-powershell-to-create-a-windows-service-dependency-diagrams/</guid>
      <description>&lt;p&gt;I use powershell with graphviz to generate color coded service dependency diagrams for windows services. Besides creating useful and beautiful diagrams for your environment, this will also provide some interesting functions for gathering remote service information with alternate credentials.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell Utility: Comment Based Help Automater</title>
      <link>https://zacharyloeber.com/blog/2013/06/02/powershell-utility-comment-based-help-automater/</link>
      <pubDate>Sun, 02 Jun 2013 20:05:05 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/02/powershell-utility-comment-based-help-automater/</guid>
      <description>&lt;p&gt;Comment based help is used in powershell-land to provide fast and easy help for cmdlets at the console. This little powershell based GUI helps fellow coders automatically construct comment based help blocks for their functions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010 Mailbox Audit Report Script</title>
      <link>https://zacharyloeber.com/blog/2013/05/09/exchange-2010-mailbox-audit-report-script/</link>
      <pubDate>Fri, 10 May 2013 02:33:54 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/05/09/exchange-2010-mailbox-audit-report-script/</guid>
      <description>&lt;h1 id=&#34;exchange-2010-mailbox-audit-report-script&#34;&gt;Exchange 2010 Mailbox Audit Report Script&lt;/h1&gt;

&lt;p&gt;Recently I’ve released a number of scripts such as the &lt;a href=&#34;http://gallery.technet.microsoft.com/Colorize-HTML-Table-Cells-2ea63acd&#34;&gt;HTML Table Colorizer&lt;/a&gt;, &lt;a href=&#34;http://gallery.technet.microsoft.com/Get-Exchange-Calendar-5bb4f527&#34;&gt;Exchange Mailbox Calendar Permission Function&lt;/a&gt;, and the &lt;a href=&#34;http://gallery.technet.microsoft.com/Exchange-Mailbox-GUI-5b204590&#34;&gt;Exchange Mailbox GUI&lt;/a&gt;. These were all actually created specifically as support scripts for a report generation powershell tool I’ve been working on, the Exchange Mailbox Auditing Tool.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Colorize-Table.ps1 Updated</title>
      <link>https://zacharyloeber.com/blog/2013/04/28/powershell-colorize-table-ps1-updated/</link>
      <pubDate>Sun, 28 Apr 2013 18:00:43 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/04/28/powershell-colorize-table-ps1-updated/</guid>
      <description>&lt;p&gt;A little while ago I released a script which uses custom linq assemblies to quickly modify an html table based on column header and an arbitrary scriptblock to test the values within that entire column (by default it is a simple -eq comparison). If the scriptblock evaluates to be true then you can either change just the cell style or the entire row style.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Get Calendar Permissions (multilingual edition)</title>
      <link>https://zacharyloeber.com/blog/2013/04/28/exchange-get-calendar-permissions-multilingual-edition/</link>
      <pubDate>Sun, 28 Apr 2013 17:35:54 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/04/28/exchange-get-calendar-permissions-multilingual-edition/</guid>
      <description>&lt;p&gt;Some time ago I released &lt;a href=&#34;http://gallery.technet.microsoft.com/Exchange-2010-Calendar-21695fde&#34; title=&#34;Exchange 2010 Calendar Permission GUI&#34;&gt;a rather simplistic GUI for viewing Exchange 2010 mailbox calendar permissions&lt;/a&gt;. Because of a semi-related script I&amp;#8217;m working on currently I rounded back and recreated that GUI script to be a powershell function instead. This is the result.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Colorize-Table Function</title>
      <link>https://zacharyloeber.com/blog/2013/04/17/powershell-colorize-table-function/</link>
      <pubDate>Thu, 18 Apr 2013 03:03:36 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/04/17/powershell-colorize-table-function/</guid>
      <description>&lt;p&gt;Here is a function I modified for quickly modifying the attributes of a table&amp;#8217;s rows or individual cells. It uses Linq and is blistering fast. The results are pretty as well so that doesn&amp;#8217;t hurt either.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VMware: VMware Report Generation GUI</title>
      <link>https://zacharyloeber.com/blog/2013/02/17/vmware-vmware-report-generation-gui/</link>
      <pubDate>Sun, 17 Feb 2013 17:11:52 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/02/17/vmware-vmware-report-generation-gui/</guid>
      <description>&lt;p&gt;Its been a while since I posted something new. This GUI is meant to configure regular vmware report generation. You are able to select reporting scoped to the whole farm down to individual hosts. Reports can be emailed or saved and be generated based on custom thresholds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010: Poor Mans Monitoring 1.5</title>
      <link>https://zacharyloeber.com/blog/2012/08/27/exchange-2010-poor-mans-monitoring-1-5/</link>
      <pubDate>Tue, 28 Aug 2012 02:40:20 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2012/08/27/exchange-2010-poor-mans-monitoring-1-5/</guid>
      <description>Just a quick upgrade to the script I posted earlier. This script is for monitoring and/or maintaining your Exchange 2010 mailboxes. It is meant to help an admin be proactive in their exchange environment. I updated the script to be a bit more customizable and fixed some obvious issues. The primary changes are removing the requirement for the MS chart controls as well as introducing an area of code just for custom scripts.</description>
    </item>
    
    <item>
      <title>Exchange 2010: Poor Man’s Monitoring</title>
      <link>https://zacharyloeber.com/blog/2012/07/22/exchange-2010-poor-mans-monitoring/</link>
      <pubDate>Sun, 22 Jul 2012 20:11:16 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2012/07/22/exchange-2010-poor-mans-monitoring/</guid>
      <description>&lt;p&gt;I quietly released a new script into the wild the other day, Troubleshoot-MailboxServer.ps1. This script is meant for monitoring, fixing, and reporting on Exchange 2010 database servers. It pretty much just wraps around and reports on troubleshooting scripts found in %ExchangeInstallPath%Scripts. I also set it so you can have an email sent including warning/error color coded report upon completion.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010: Even More Migration Tips</title>
      <link>https://zacharyloeber.com/blog/2012/07/10/exchange-2010-even-more-migration-tips/</link>
      <pubDate>Wed, 11 Jul 2012 00:34:32 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2012/07/10/exchange-2010-even-more-migration-tips/</guid>
      <description>&lt;p&gt;It has been a while since I passed on some personal experiences when performing Exchange 2010 migrations. I thought it was about time to update my list to include some more of the lesser known aspects of an Exchange 2010 migration.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Active Directory: Best Practices Workbook</title>
      <link>https://zacharyloeber.com/blog/2012/05/28/active-directory-best-practices-workbook/</link>
      <pubDate>Mon, 28 May 2012 21:57:58 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2012/05/28/active-directory-best-practices-workbook/</guid>
      <description>&lt;p&gt;This is a checklist for technicians performing Active Directory assessments. It is broken down by category and best practice. Some items listed are not really a best practice, but rather something which you may find in an environment which should be rectified (as part of an audit perhaps).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010: Changing an invalid DNS suffixed server</title>
      <link>https://zacharyloeber.com/blog/2012/02/29/exchange-2010-changing-an-invalid-dns-suffixed-server/</link>
      <pubDate>Thu, 01 Mar 2012 05:30:13 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2012/02/29/exchange-2010-changing-an-invalid-dns-suffixed-server/</guid>
      <description>&lt;p&gt;I ran into an interesting Exchange &lt;sup&gt;2010&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2007&lt;/sub&gt; co-existence issue today. After a new Exchange 2010 (all-in-one) server was introduced into the environment traffic would only flow from the 2010 server to the 2007 hub/cas server and not the other way around. The mail queues stated the last error to be&lt;/p&gt;

&lt;pre&gt;“Initial error: 451 4.4.0 dns query failed. The error was: SMTPsend.dns.nonexistentdomain; nonexistent”&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010: Client Access Role Configuration Report</title>
      <link>https://zacharyloeber.com/blog/2012/02/04/exchange-2010-client-access-role-configuration-report/</link>
      <pubDate>Sat, 04 Feb 2012 14:03:29 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2012/02/04/exchange-2010-client-access-role-configuration-report/</guid>
      <description>Ok, so I woke up and was wide awake at 4am this morning. I took it as a sign to lose my mind for a while and get to hacking another script. The result is a client access setting report script which includes all internal and external paths along with their authentication settings. It needs some prettying up and a bit of love but it does exactly what I&amp;#8217;ve wanted in Exchange 2010, gives me an overall view of all client access settings (specifically related to IIS).</description>
    </item>
    
    <item>
      <title>Exchange 2010 One-liner: Get All Network Interface Information</title>
      <link>https://zacharyloeber.com/blog/2011/08/19/exchange-2010-one-liner-get-all-network-interface-information/</link>
      <pubDate>Fri, 19 Aug 2011 16:57:15 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/08/19/exchange-2010-one-liner-get-all-network-interface-information/</guid>
      <description>Here are a few quick powershell one-liners to get all the network interface information in your exchange environment:
$ExchServers=(Get-ExchangeServer); @(foreach ($Srv in $ExchServers) {Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName $Srv.Name | select @{Name=&#34;Server&#34;;Expression={$Srv.Name}},@{Name=&#34;DNS Host Name&#34;;Expression={$_.DNSHostName}},@{Name=&#34;Server Role&#34;;Expression={$Srv.ServerRole}},Description,@{Name=&#34;IP Address&#34;;Expression={$_.IPAddress}},@{Name=&#34;IP Subnet&#34;;Expression={$_.IPSubnet}},@{Name=&#34;Default Gateway&#34;;Expression={$_.DefaultIPGateway}},@{Name=&#34;Mac Address&#34;;Expression={$_.MacAddress}},@{Name=&#34;DNS Suffix Search Order&#34;;Expression={$_.DNSDomainSuffixSearchOrder}},@{Name=&#34;DNS Server Search Order&#34;;Expression={$_.DNSServerSearchOrder}},FullDNSRegistrationEnabled}) |Export-Csv -NoTypeInformation &#34;C:\Temp\Exchange-network.csv&#34; If you just want interface information for Exchange 2010 servers:
$ExchServers=(Get-ExchangeServer | where {$_.ServerRole -ne &#34;None&#34;}); @(foreach ($Srv in $ExchServers) {Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName $Srv.</description>
    </item>
    
    <item>
      <title>Exchange 2010: A Few More Migration Tips</title>
      <link>https://zacharyloeber.com/blog/2011/08/13/exchange-2010-a-few-more-migration-tips/</link>
      <pubDate>Sat, 13 Aug 2011 23:43:04 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/08/13/exchange-2010-a-few-more-migration-tips/</guid>
      <description>&lt;p&gt;Here are a few more notes from the field to consider when you are planning your Exchange 2010 deployment and migration. Some of these items are good to know even after you have completed your migration and may help with overall system stability.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Active Directory: Essential Tools</title>
      <link>https://zacharyloeber.com/blog/2011/08/11/active-directory-essential-tools/</link>
      <pubDate>Thu, 11 Aug 2011 18:35:00 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/08/11/active-directory-essential-tools/</guid>
      <description>&lt;p&gt;During my many years of working with active directory I’ve used several tools. Here are some of the best that I’ve used which are not baked into windows. Good thing about this list is that most of these tools are fee! Another bonus is that most of the information gathering tools don’t require elevated rights as, by default, domain users have read-only access to active directory.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010: Automated Firewall Rule Generation 1.4</title>
      <link>https://zacharyloeber.com/blog/2011/07/29/exchange-2010-automated-firewall-rule-generation-1-4/</link>
      <pubDate>Fri, 29 Jul 2011 15:28:07 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/07/29/exchange-2010-automated-firewall-rule-generation-1-4/</guid>
      <description>&lt;p&gt;I made some updates to the automated firewall rule generation script. This includes some updates to the firewall rule spreadsheet to give information on setting setic ports and port ranges for RPC based services. This csv file may be a good general reference even without the script.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010: Automated Firewall Rule Generation 1.2</title>
      <link>https://zacharyloeber.com/blog/2011/07/20/exchange-2010-automated-firewall-rule-generation-1-2/</link>
      <pubDate>Wed, 20 Jul 2011 16:35:08 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/07/20/exchange-2010-automated-firewall-rule-generation-1-2/</guid>
      <description>I made a few changes to this script to make it more modular and to allow for more exceptions in regards to DAGs and sites. Enjoy!
Exchange 2010 Firewall Rule Generation Script</description>
    </item>
    
    <item>
      <title>Exchange 2010: Automated Firewall Rule Generation</title>
      <link>https://zacharyloeber.com/blog/2011/06/24/exchange-2010-automated-firewall-rule-generation/</link>
      <pubDate>Fri, 24 Jun 2011 16:40:50 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/06/24/exchange-2010-automated-firewall-rule-generation/</guid>
      <description>&lt;p&gt;A single, or even a dual site Exchange 2010 deployment does not usually require too much internal firewall manipulation. But if you have to setup a Exchange 2010 environment where there are many global sites or a heavily segmented network, the number of firewall requests required to get a fully functioning configuration working can be daunting. Wouldn&amp;#8217;t it be nice to have some of those firewall rules automatically generated for you?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010: Protect VIP Mailboxes with Exclusive Scopes</title>
      <link>https://zacharyloeber.com/blog/2011/05/04/exchange-2010-protect-vip-mailboxes-with-exclusive-scopes/</link>
      <pubDate>Wed, 04 May 2011 21:26:37 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/05/04/exchange-2010-protect-vip-mailboxes-with-exclusive-scopes/</guid>
      <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Prior to starting my new job I wanted to ensure that my previous employer was able to protect VIP mailboxes in their Exchange 2010 SP1 organization. I had to do this with exclusive scopes and these are the steps I had to follow. A general knowledge of role based security is assumed in this post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Outlook 2010: Photo Sizing Tool</title>
      <link>https://zacharyloeber.com/blog/2011/02/01/outlook-2010-photo-sizing-tool/</link>
      <pubDate>Tue, 01 Feb 2011 15:35:24 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/02/01/outlook-2010-photo-sizing-tool/</guid>
      <description>&lt;p&gt;We are about to get into full swing with our Exchange 2010 mailbox migrations and, soon afterwards, Office 2007 to 2010 upgrades as well. Unfortunately, we don&amp;#8217;t have our Sharepoint farm upgraded to 2010 yet so there will be no automatic syncing of user photos into the GAL for those nice vanity pics which you can view in Outlook 2010. I know people like to be seen so I found a nice &lt;a title=&#34;This little hack rocks!&#34; href=&#34;http://www.mikepfeiffer.net/2010/05/manage-exchange-2010-thumbnail-photos-with-a-powershell-based-gui/&#34; target=&#34;_blank&#34;&gt;powershell based GUI &lt;/a&gt;for our (awesome) service desk team to use to upload these photos for users as requested. But you still have to get these photos thumbnailed to approximately 96&amp;#215;96 before uploading. Repeated manual labor is the anathema of any self respecting sysadmin who knows how to hack other people&amp;#8217;s code to suit their needs. So I whipped up a very dirty (as in, &amp;#8220;wow, get the bar of soap&amp;#8221; dirty) hack which combines &lt;a title=&#34;How to batch optimize your Exchange GAL Photos before importing to Active Directory&#34; href=&#34;http://www.stevieg.org/2011/01/batch-optimize-exchange-gal-photos-importing-active-directory/comment-page-1/#comment-1085&#34; target=&#34;_blank&#34;&gt;this person&amp;#8217;s clever photo-sizing hack&lt;/a&gt; with the prior mentioned gui.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange – Notify Forwarded Accounts Script</title>
      <link>https://zacharyloeber.com/blog/2011/01/10/exchange-notify-forwarded-accounts-script/</link>
      <pubDate>Mon, 10 Jan 2011 20:00:19 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/01/10/exchange-notify-forwarded-accounts-script/</guid>
      <description>In cleaning up a large number of disabled user accounts in AD I wanted a way to notify a large number of users specifically that they were being forwarded e-mail from another account. This was part of an effort to clean up AD a bit before moving everyone over to Exchange 2010 but it can be used independently of any one project as part of a general AD maintenance plan.</description>
    </item>
    
    <item>
      <title>Exchange 2010 (SP1): Pre-Deployment Tips</title>
      <link>https://zacharyloeber.com/blog/2010/12/17/exchange-2010-sp1-pre-deployment-tips/</link>
      <pubDate>Fri, 17 Dec 2010 18:55:00 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2010/12/17/exchange-2010-sp1-pre-deployment-tips/</guid>
      <description>&lt;p&gt;I recently had the opportunity to experience all of the blood, sweat, and tears of migrating a minimally maintained Exchange 2003 infrastructure to Exchange 2010 (and mid-way through, an upgrade to 2010 SP1). All of the docs out on the web for migrations make it seem soooo easy. But if you are going to do anything other than a single server install and are doing things like, oh say; hardware load balancing, Exchange 2003 co-existence, or working in an old multi-domain forest then you are in for some punishment. I think I ran into every possible issue that you can have with an Exchange 2010 migration. One guide that helped me in this endeavor was the &lt;a title=&#34;Rapid Exchange 2003 to 2010 Transition Guide&#34; href=&#34;http://msexchangegeek.com/2010/01/30/rapid-transition-guide-from-exchange-2003-to-exchange-2010/&#34; target=&#34;_blank&#34;&gt;rapid transition guide from Exchange 2003 to Exchange 2010&lt;/a&gt;. This guide didn&amp;#8217;t cover every aspect for me though, here are a few things that may save you a little bit of hassle. I&amp;#8217;ve been meaning to publish this for a while and I have a whole lot more notes from this experience but this is a start.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>