<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2008 R2 on </title>
    <link>https://zacharyloeber.com/tags/2008-r2/</link>
    <description>Recent content in 2008 R2 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 06 Oct 2013 23:32:48 +0000</lastBuildDate>
    
	<atom:link href="https://zacharyloeber.com/tags/2008-r2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Retrieve Remote Scheduled Task Information With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/10/06/retrieve-remote-scheduled-task-information-with-powershell/</link>
      <pubDate>Sun, 06 Oct 2013 23:32:48 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/10/06/retrieve-remote-scheduled-task-information-with-powershell/</guid>
      <description>&lt;p&gt;This function uses multiple runspaces with along with COM objects to gather information about the scheduled tasks of remote systems. Getting this to work with alternate credentials may be possible but I wasn’t able to discern a usable method to make it happen so I resorted to PSremoting. What this means is that this script will work against multiple remote systems which do not have psremoting enabled as long as you are running the script with an account that has administrative rights to them. If you do pass a credential to the function then psremoting will be used instead. You can also force psremoting to be used if you are using that across the board in your environment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather Remote Command Results With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/19/gather-remote-command-results-with-powershell/</link>
      <pubDate>Thu, 19 Sep 2013 16:22:41 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/19/gather-remote-command-results-with-powershell/</guid>
      <description>&lt;p&gt;Send a remote command using wmi, alternate credentials, and multiple runspaces then retrieve the results serially using mapped secure channels to the remote host. The remote command execution function supports custom timeout parameters in case of wmi problems and returns the remote tmp file information containing the command results. You can view verbose information on each runspace thread in realtime with the -Verbose option.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Get Remote Shadow Volume Information With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/14/get-remote-shadow-volume-information-with-powershell/</link>
      <pubDate>Sun, 15 Sep 2013 02:57:55 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/14/get-remote-shadow-volume-information-with-powershell/</guid>
      <description>&lt;p&gt;Gather the remote shadow volume information for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems and returns shadow volume information, shadow copies, their providers, and settings. You can view verbose information on each runspace thread in realtime with the -Verbose option.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather Local Group Membership With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/11/gather-local-group-membership-with-powershell/</link>
      <pubDate>Wed, 11 Sep 2013 14:11:52 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/11/gather-local-group-membership-with-powershell/</guid>
      <description>Gather system local groups and their members for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems, a switch for inclusion of empty groups in the results, and returns group names with their members. You can view verbose information on each runspace thread in realtime with the -Verbose option.
Version History 1.0.0 &amp;#8211; 09/11/2013
 Initial release  Notes None, this is an independent release of a function I’ve recently included in a larger project.</description>
    </item>
    
    <item>
      <title>Excel and HTML Asset Reports With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/08/excel-and-html-asset-reports-with-powershell/</link>
      <pubDate>Sun, 08 Sep 2013 05:07:29 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/08/excel-and-html-asset-reports-with-powershell/</guid>
      <description>&lt;p&gt;This set of powershell functions collates and generates reports upon system information it gathers. Information gathered includes hardware health, system information, networking information and much much more. Multiple types of html reports can be generated and all data can be exported directly to an excel workbook, saved as individual reports, and emailed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multithreaded Remote Registry Gathering with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/06/multithreaded-remote-registry-gathering-with-powershell/</link>
      <pubDate>Wed, 07 Aug 2013 03:11:49 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/06/multithreaded-remote-registry-gathering-with-powershell/</guid>
      <description>&lt;p&gt;Gather specific subkey values or an entire registry key’s subkey values with powershell and multithreading.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multithreaded System Asset Gathering with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/05/multithreaded-system-asset-gathering-with-powershell/</link>
      <pubDate>Mon, 05 Aug 2013 17:35:31 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/05/multithreaded-system-asset-gathering-with-powershell/</guid>
      <description>&lt;p&gt;This function gathers a plethora of useful system information via WMI and multithreading with powershell.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use Powershell to Gather Disk/Partition/Mount Point Information</title>
      <link>https://zacharyloeber.com/blog/2013/06/23/use-powershell-to-gather-diskpartitionmount-point-information/</link>
      <pubDate>Mon, 24 Jun 2013 04:41:01 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/23/use-powershell-to-gather-diskpartitionmount-point-information/</guid>
      <description>&lt;p&gt;I put together a function for remotely gathering Windows disk information. This was specifically written to accommodate alternate credentials. This script also accounts for the glaring disconnect between win32_Volume and win32_DiskDrive within WMI.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010: Even More Migration Tips</title>
      <link>https://zacharyloeber.com/blog/2012/07/10/exchange-2010-even-more-migration-tips/</link>
      <pubDate>Wed, 11 Jul 2012 00:34:32 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2012/07/10/exchange-2010-even-more-migration-tips/</guid>
      <description>&lt;p&gt;It has been a while since I passed on some personal experiences when performing Exchange 2010 migrations. I thought it was about time to update my list to include some more of the lesser known aspects of an Exchange 2010 migration.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Active Directory: Essential Tools</title>
      <link>https://zacharyloeber.com/blog/2011/08/11/active-directory-essential-tools/</link>
      <pubDate>Thu, 11 Aug 2011 18:35:00 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/08/11/active-directory-essential-tools/</guid>
      <description>&lt;p&gt;During my many years of working with active directory I’ve used several tools. Here are some of the best that I’ve used which are not baked into windows. Good thing about this list is that most of these tools are fee! Another bonus is that most of the information gathering tools don’t require elevated rights as, by default, domain users have read-only access to active directory.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows: 2003 to 2008 R2 RADIUS Migration</title>
      <link>https://zacharyloeber.com/blog/2011/03/17/windows-2003-to-2008-r2-radius-migration/</link>
      <pubDate>Thu, 17 Mar 2011 12:58:12 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2011/03/17/windows-2003-to-2008-r2-radius-migration/</guid>
      <description>&lt;p&gt;I found myself doing yet another Windows 2003 IAS Radius server migration to 2008 R2 NPS. I found that I had my prior notes and was able to do this quickly but, hell, if I&amp;#8217;m looking this up in my own notes I may as well just post this succinct little procedure.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>