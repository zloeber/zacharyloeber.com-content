<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting on Zachary Loeber</title>
    <link>https://zacharyloeber.com/tags/scripting/</link>
    <description>Recent content in Scripting on Zachary Loeber</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 28 Sep 2018 16:49:46 +0000</lastBuildDate>
    
	<atom:link href="https://zacharyloeber.com/tags/scripting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DevOps – Automating Kubernetes Deployments</title>
      <link>https://zacharyloeber.com/blog/2018/09/28/devops-automating-kubernetes-deployments/</link>
      <pubDate>Fri, 28 Sep 2018 16:49:46 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2018/09/28/devops-automating-kubernetes-deployments/</guid>
      <description>If you are deploying your own Kubernetes clusters you already know that:
But there is hope!
There are a few great projects to keep an eye on in this space. I’ve covered some of them in an article you can read on the Lumen.
Cheers!</description>
    </item>
    
    <item>
      <title>PowerShell: AzureAD Dynamic Groups</title>
      <link>https://zacharyloeber.com/blog/2018/02/04/powershell-azuread-dynamic-groups/</link>
      <pubDate>Sun, 04 Feb 2018 17:36:57 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2018/02/04/powershell-azuread-dynamic-groups/</guid>
      <description>&lt;p&gt;A few code snippets for Azure AD dynamic groups. One for creating standard groups for your environment. Another for finding duplicates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: Inheriting Parameters (Proxy Functions)</title>
      <link>https://zacharyloeber.com/blog/2017/07/30/powershell-inheriting-parameters-proxy-functions/</link>
      <pubDate>Sun, 30 Jul 2017 14:23:36 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2017/07/30/powershell-inheriting-parameters-proxy-functions/</guid>
      <description>&lt;p&gt;If you want one function to have all the parameters of another function here is one method you could use.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Creating Plaster Manifest Files</title>
      <link>https://zacharyloeber.com/blog/2017/05/15/powershell-creating-plaster-manifest-files/</link>
      <pubDate>Mon, 15 May 2017 17:49:48 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2017/05/15/powershell-creating-plaster-manifest-files/</guid>
      <description>&lt;p&gt;I’ve kicked the tires on a great PowerShell code scaffolding tool called ‘Plaster’. Here is my take on this nifty module.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: New Project – OhMyPsh</title>
      <link>https://zacharyloeber.com/blog/2017/03/06/powershell-new-project-ohmypsh/</link>
      <pubDate>Tue, 07 Mar 2017 03:05:19 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2017/03/06/powershell-new-project-ohmypsh/</guid>
      <description>&lt;p&gt;A PowerShell 5.0 terminal experience with lots of smart features that make you look cool at the command line.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: Azure ARM Site Overview</title>
      <link>https://zacharyloeber.com/blog/2017/01/30/powershell-azure-arm-site-overview/</link>
      <pubDate>Tue, 31 Jan 2017 03:23:32 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2017/01/30/powershell-azure-arm-site-overview/</guid>
      <description>&lt;p&gt;Visualizing an Azure deployment can be a bit tricky. This short Azure summary script is a good way to start though.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: New-ADPasswordReminder</title>
      <link>https://zacharyloeber.com/blog/2016/10/13/powershell-new-adpasswordreminder/</link>
      <pubDate>Thu, 13 Oct 2016 19:03:55 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/10/13/powershell-new-adpasswordreminder/</guid>
      <description>&lt;p&gt;A single, self-extracting, self-scheduling, AD password change notice PowerShell script.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OSS PowerShell: Platform Independent Functions</title>
      <link>https://zacharyloeber.com/blog/2016/08/20/oss-powershell-platform-independent-functions/</link>
      <pubDate>Sun, 21 Aug 2016 03:41:03 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/08/20/oss-powershell-platform-independent-functions/</guid>
      <description>&lt;p&gt;Just the other day Microsoft released PowerShell as open source with builds available for Windows, Mac OSX, and a few flavors of Linux. I’m pretty certain the entire community is super hyped at the news. I know I am!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: New Project – PSModuleBuild</title>
      <link>https://zacharyloeber.com/blog/2016/07/31/powershell-new-project-psmodulebuild/</link>
      <pubDate>Mon, 01 Aug 2016 02:34:55 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2016/07/31/powershell-new-project-psmodulebuild/</guid>
      <description>&lt;p&gt;I’ve spent a little bit of time thinking about and putting together a proper build script for one of my projects. This post covers the decisions I made and technologies I used to get this set this up.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Make Pretty Scripts..With Scripts</title>
      <link>https://zacharyloeber.com/blog/2015/10/15/powershell-make-pretty-scripts-with-scripts/</link>
      <pubDate>Thu, 15 Oct 2015 17:58:07 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/10/15/powershell-make-pretty-scripts-with-scripts/</guid>
      <description>&lt;p&gt;I released a new module for standardizing and beautifying your PowerShell code. Aside from code indentation it also can reduce line length, replace here-strings, and a whole lot more.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: Comment Based Help Generation</title>
      <link>https://zacharyloeber.com/blog/2015/10/02/powershell-comment-based-help-generation/</link>
      <pubDate>Sat, 03 Oct 2015 02:30:06 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/10/02/powershell-comment-based-help-generation/</guid>
      <description>&lt;p&gt;Here is a quick couple of functions I put together which will use AST to pull all the functions, their parameters, and associated parameter attributes and create a template comment based help from the results.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Login As Batch Job Security Rights</title>
      <link>https://zacharyloeber.com/blog/2015/07/17/powershell-login-as-batch-job-security-rights/</link>
      <pubDate>Sat, 18 Jul 2015 04:09:12 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/07/17/powershell-login-as-batch-job-security-rights/</guid>
      <description>Here is a quick bit of PowerShell. It is some snippets of C# code wrapped up with PowerShell which will allow you to assign accounts to the ‘login as batch job’ local security rights of a local machine. The code is no great shakes but it is a good example of how you might take some existing online code and modify to suit your needs in PowerShell. This function also compliments another script I’ve released in the past for automatically scheduling PowerShell scheduled tasks rather well.</description>
    </item>
    
    <item>
      <title>Exchange: Database Leveling Redux</title>
      <link>https://zacharyloeber.com/blog/2015/04/06/exchange-database-leveling-redux/</link>
      <pubDate>Tue, 07 Apr 2015 00:12:33 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/04/06/exchange-database-leveling-redux/</guid>
      <description>&lt;p&gt;Some time ago I &lt;a href=&#34;https://zacharyloeber.com/2014/01/07/exchange-20102013-database-leveling-script/&#34;&gt;tackled the challenge&lt;/a&gt; of constructing a variant of the bin packing algorithm for leveling out Exchange databases’ size with the least amount of mailbox migrations necessary. Since then, I’ve been approached by a few people in dreadfully large environments looking for help with errors and compatibility issues around the script I released. I’ve finally rounded back to this script to do it some justice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: WPF/Treeview OU Selection Dialog</title>
      <link>https://zacharyloeber.com/blog/2015/03/22/powershell-wpftreeview-ou-selection-dialog/</link>
      <pubDate>Sun, 22 Mar 2015 16:13:54 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/03/22/powershell-wpftreeview-ou-selection-dialog/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Lync Client: Automatic Fortune Cookie Utility</title>
      <link>https://zacharyloeber.com/blog/2015/02/08/lync-client-automatic-fortune-cookie-utility/</link>
      <pubDate>Sun, 08 Feb 2015 23:30:30 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/02/08/lync-client-automatic-fortune-cookie-utility/</guid>
      <description>&lt;p&gt;Here’s a just for fun powershell script for the Lync user. In the not so old days of Unix administration it was not too uncommon to have a ‘&lt;a href=&#34;http://en.wikipedia.org/wiki/Fortune_%28Unix%29&#34;&gt;fortune cookie’ display when logging into a system&lt;/a&gt;. I’ve always thought that it would be neat to have something similar in the Lync client that would allow for an easy rotation of your personal note field. Little did I realize how easy it would be to add such functionality myself with some powershell and the Lync SDK!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Check For Misplaced Certificates</title>
      <link>https://zacharyloeber.com/blog/2014/12/10/powershell-check-for-misplaced-certificates/</link>
      <pubDate>Thu, 11 Dec 2014 03:02:28 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/12/10/powershell-check-for-misplaced-certificates/</guid>
      <description>&lt;p&gt;Here is a script I absentmindedly put together one evening while power watching a TV series on Netflix with the wife. The general idea of this script is to check local machine, trusted root, and intermediate trusted root stores for misplaced or duplicate certificates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2013: Server Component State Script</title>
      <link>https://zacharyloeber.com/blog/2014/12/08/exchange-2013-server-component-state-script/</link>
      <pubDate>Tue, 09 Dec 2014 01:28:23 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/12/08/exchange-2013-server-component-state-script/</guid>
      <description>&lt;p&gt;Exchange 2013 includes some powershell commands which allow you to set and view several components in the messaging infrastructure. This is important to be aware of as it means all Exchange related services can be running when looking at them in service manager (services.msc) but not actually doing anything. I went ahead put together a script to better gather this information for administrators.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange Mailbox Auditing with Powershell</title>
      <link>https://zacharyloeber.com/blog/2014/11/24/exchange-mailbox-auditing-with-powershell/</link>
      <pubDate>Tue, 25 Nov 2014 05:55:01 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/11/24/exchange-mailbox-auditing-with-powershell/</guid>
      <description>&lt;p&gt;Some time ago I wrote a script and GUI for performing security audits of Exchange mailbox and calendar rights in an environment. This script was far more popular than I anticipated and, I’m ashamed to say, was rather poorly written by my current Powershell standards. There is an obvious need to simplify the extraction of mailbox permissions or my old script would not still be so popular. So I’ve started to revisit my old code for this project in hopes of remaking it with my PowerShell reporting engine. The first step in this process is to pull out the several bits of code that do the actual rights/permissions extraction. I think I’ve finally got this part done and see no reason not to release this mini-library of functions first.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync UCS Contacts Reporting with Powershell</title>
      <link>https://zacharyloeber.com/blog/2014/11/21/lync-ucs-contacts-reporting-with-powershell/</link>
      <pubDate>Fri, 21 Nov 2014 17:37:30 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/11/21/lync-ucs-contacts-reporting-with-powershell/</guid>
      <description>By default a Lync enabled account within a Lync/Exchange 2013 environment will be enabled for UCS (Unified Contact Store). This means that the Lync contacts get saved in the Lync user’s mailbox and not the Lync database. In order to get a list of the contacts associated with these accounts you have to export data to a zip file with some debug Lync commands and, even then, the information is buried in a hard to interpret XML file.</description>
    </item>
    
    <item>
      <title>Exchange Log Level GUI Script</title>
      <link>https://zacharyloeber.com/blog/2014/07/06/exchange-log-level-gui-script/</link>
      <pubDate>Mon, 07 Jul 2014 03:30:20 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/07/06/exchange-log-level-gui-script/</guid>
      <description>&lt;p&gt;I ran into a situation recently where I was forced to amp up the Exchange logging levels to further troubleshoot an issue with some pretty specific Exchange components. I found myself wanting a quick GUI to view and set the levels but found none. So I used this as an opportunity to learn a bit about xaml based GUIs and powershell. The result is this simple, but useful, Exchange log level GUI script which was written for Exchange 2013 but should also run on 2010.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Word/Excel Helper Functions</title>
      <link>https://zacharyloeber.com/blog/2014/03/16/powershell-wordexcel-helper-functions/</link>
      <pubDate>Mon, 17 Mar 2014 03:19:39 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/03/16/powershell-wordexcel-helper-functions/</guid>
      <description>&lt;p&gt;Using powershell I wrap up MS Word and Excel COM objects within a custom psobject. This object contains a handful of methods for making docx and xslx creation and manipulation easier.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell Tip: Convert HTML to PDF</title>
      <link>https://zacharyloeber.com/blog/2014/03/07/posh-tip-convert-html-to-pdf/</link>
      <pubDate>Fri, 07 Mar 2014 18:55:35 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/03/07/posh-tip-convert-html-to-pdf/</guid>
      <description>&lt;p&gt;There are no native methods to create a pdf file in Powershell. So I looked into outside sources for converting HTML output to PDF. I ended up using a stand alone dll and some .NET calls to achieve my goal.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell GUI Script Wrapper Utility</title>
      <link>https://zacharyloeber.com/blog/2014/02/02/powershell-gui-script-wrapper-utility/</link>
      <pubDate>Mon, 03 Feb 2014 03:32:39 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/02/02/powershell-gui-script-wrapper-utility/</guid>
      <description>&lt;p&gt;Creating GUIs for your scripts can be a tedious process. That is why I don’t do so for each powershell project I release. Instead of wasting my precious little free time putting together yet another GUI for a one off script I decided to create a tool which will create the GUI scripts for me automatically!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather (and Diagram) Installed Roles and Features With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/12/18/gather-and-diagram-installed-roles-and-features-with-powershell/</link>
      <pubDate>Wed, 18 Dec 2013 18:53:18 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/12/18/gather-and-diagram-installed-roles-and-features-with-powershell/</guid>
      <description>&lt;p&gt;Use this powershell script to gather installed features and roles from remote systems. This uses two wmi classes in an attempt to gather as much information as possible. Win32_ServerFeature will contain roles and their dependencies on systems running Windows 2008 and above. For these systems we can use this hierarchy to also produce pretty diagrams using graphviz and techniques I’ve exhibited in some of my other scripts (I added this last part in cause it is easy to do, not really certain how useful it is other than maybe exploring the dependencies between windows roles/features).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync 2013: Monitoring Mirrored SQL Databases With PowerShell</title>
      <link>https://zacharyloeber.com/blog/2013/11/25/lync-2013-monitoring-mirrored-sql-databases-with-powershell/</link>
      <pubDate>Mon, 25 Nov 2013 18:16:24 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/11/25/lync-2013-monitoring-mirrored-sql-databases-with-powershell/</guid>
      <description>&lt;p&gt;In Lync 2013 you are given a powerful new backend redundancy option for your important databases in the form of SQL mirroring. In this article I’ll discuss which services are able to be mirrored, the databases they encompass, and provide a PowerShell script to generate a report on the database mirror status. I also threw in Lync CMS replication and service status sections because it is the civil thing to do…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather Remote Event Logs With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/10/16/gather-remote-event-logs-with-powershell/</link>
      <pubDate>Wed, 16 Oct 2013 17:01:13 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/10/16/gather-remote-event-logs-with-powershell/</guid>
      <description>About Gather the remote event log information for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems and returns Event Log information for the specified number of past hours. You can view verbose information on each runspace thread in realtime with the -Verbose option.
Version History 1.0.0 – 10/16/2013
 Initial release  Notes By default 24 hours is what we filter against for the results.</description>
    </item>
    
    <item>
      <title>Retrieve Remote Scheduled Task Information With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/10/06/retrieve-remote-scheduled-task-information-with-powershell/</link>
      <pubDate>Sun, 06 Oct 2013 23:32:48 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/10/06/retrieve-remote-scheduled-task-information-with-powershell/</guid>
      <description>&lt;p&gt;This function uses multiple runspaces with along with COM objects to gather information about the scheduled tasks of remote systems. Getting this to work with alternate credentials may be possible but I wasn’t able to discern a usable method to make it happen so I resorted to PSremoting. What this means is that this script will work against multiple remote systems which do not have psremoting enabled as long as you are running the script with an account that has administrative rights to them. If you do pass a credential to the function then psremoting will be used instead. You can also force psremoting to be used if you are using that across the board in your environment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visualize Active Directory Site Connections</title>
      <link>https://zacharyloeber.com/blog/2013/10/06/visualize-active-directory-site-connections/</link>
      <pubDate>Sun, 06 Oct 2013 22:50:35 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/10/06/visualize-active-directory-site-connections/</guid>
      <description>&lt;h4 id=&#34;span-stylecolor-bbbbbb-font-size-12px-font-weight-normal-line-height-16in-this-post-i-use-powershell-with-graphviz-to-create-an-active-directory-diagram-of-all-site-connections-between-servers-additionally-ive-included-some-code-which-displays-site-connection-options-you-may-be-able-to-use-this-to-find-isolated-dcs-or-just-to-see-a-pretty-diagramspan&#34;&gt;&lt;!-- raw HTML omitted --&gt;In this post I use powershell with graphviz to create an Active Directory diagram of all site connections between servers. Additionally, I’ve included some code which displays site connection options. You may be able to use this to find isolated DCs or just to see a pretty diagram.&lt;!-- raw HTML omitted --&gt;&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>Find Disabled Users With Lync Enabled Without Lync Cmdlts</title>
      <link>https://zacharyloeber.com/blog/2013/09/30/find-disabled-users-with-lync-enabled-without-lync-cmdlts/</link>
      <pubDate>Mon, 30 Sep 2013 21:19:15 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/30/find-disabled-users-with-lync-enabled-without-lync-cmdlts/</guid>
      <description>&lt;p&gt;Here is a quick tip which applies to more than just Lync. I use powershell with .NET ADSI to gather a list of all users which are disabled but still have Lync sip addresses assigned. There are numerous reasons to disable lync on such accounts. One reason would be to make certain that users whom are no longer with the organization get removed from the Lync address list. Another is so these same users can no longer access Lync! (Yes, a disabled AD account may still be authorized to access Lync).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather Remote Command Results With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/19/gather-remote-command-results-with-powershell/</link>
      <pubDate>Thu, 19 Sep 2013 16:22:41 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/19/gather-remote-command-results-with-powershell/</guid>
      <description>&lt;p&gt;Send a remote command using wmi, alternate credentials, and multiple runspaces then retrieve the results serially using mapped secure channels to the remote host. The remote command execution function supports custom timeout parameters in case of wmi problems and returns the remote tmp file information containing the command results. You can view verbose information on each runspace thread in realtime with the -Verbose option.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Get Remote Shadow Volume Information With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/14/get-remote-shadow-volume-information-with-powershell/</link>
      <pubDate>Sun, 15 Sep 2013 02:57:55 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/14/get-remote-shadow-volume-information-with-powershell/</guid>
      <description>&lt;p&gt;Gather the remote shadow volume information for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems and returns shadow volume information, shadow copies, their providers, and settings. You can view verbose information on each runspace thread in realtime with the -Verbose option.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather Local Group Membership With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/09/11/gather-local-group-membership-with-powershell/</link>
      <pubDate>Wed, 11 Sep 2013 14:11:52 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/09/11/gather-local-group-membership-with-powershell/</guid>
      <description>Gather system local groups and their members for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems, a switch for inclusion of empty groups in the results, and returns group names with their members. You can view verbose information on each runspace thread in realtime with the -Verbose option.
Version History 1.0.0 – 09/11/2013
 Initial release  Notes None, this is an independent release of a function I’ve recently included in a larger project.</description>
    </item>
    
    <item>
      <title>Gather Remote Installed Programs With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/28/gather-remote-installed-programs-with-powershell/</link>
      <pubDate>Wed, 28 Aug 2013 13:25:22 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/28/gather-remote-installed-programs-with-powershell/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Gather program install information for one or more systems using wmi, alternate credentials, and multiple runspaces. Function supports custom timeout parameters in case of wmi problems and returns from the registry program name, manufacturer, and uninstall information. You can view verbose information on each runspace thread in realtime with the -Verbose option.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multithreaded HP Server Health Check with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/22/multithreaded-hp-server-health-check-with-powershell/</link>
      <pubDate>Thu, 22 Aug 2013 17:32:45 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/22/multithreaded-hp-server-health-check-with-powershell/</guid>
      <description>&lt;h2 id=&#34;about&#34;&gt;About&lt;/h2&gt;
&lt;p&gt;This function attempts to query the HP WBEM WMI provider information to ascertain the general health of a physical server. By default just the general health status is returned. Optionally you can include the following components in the results: ethernet teams, array controllers , ethernet adapters, fans, HBAs, power supplies, and temperature sensors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multithreaded Remote Registry Gathering with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/06/multithreaded-remote-registry-gathering-with-powershell/</link>
      <pubDate>Wed, 07 Aug 2013 03:11:49 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/06/multithreaded-remote-registry-gathering-with-powershell/</guid>
      <description>&lt;p&gt;Gather specific subkey values or an entire registry key’s subkey values with powershell and multithreading.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multithreaded System Asset Gathering with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/08/05/multithreaded-system-asset-gathering-with-powershell/</link>
      <pubDate>Mon, 05 Aug 2013 17:35:31 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/08/05/multithreaded-system-asset-gathering-with-powershell/</guid>
      <description>&lt;p&gt;This function gathers a plethora of useful system information via WMI and multithreading with powershell.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Determine if a computer is virtual with powershell</title>
      <link>https://zacharyloeber.com/blog/2013/07/26/determine-if-a-computer-is-virtual-with-powershell/</link>
      <pubDate>Fri, 26 Jul 2013 18:22:43 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/07/26/determine-if-a-computer-is-virtual-with-powershell/</guid>
      <description>&lt;p&gt;This function attempts to connect to a computer and find out if it is virtual or not using WMI. If it is virtual, a best guess at the type of virtual platform it is running upon is returned as well.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010 Mailbox Audit Report GUI</title>
      <link>https://zacharyloeber.com/blog/2013/06/28/exchange-2010-mailbox-audit-report-gui/</link>
      <pubDate>Fri, 28 Jun 2013 20:17:29 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/28/exchange-2010-mailbox-audit-report-gui/</guid>
      <description>&lt;p&gt;I’ve updated the original &lt;a href=&#34;https://zacharyloeber.com/2013/05/09/exchange-2010-mailbox-audit-report-script/&#34;&gt;Exchange Mailbox Audit Report Script&lt;/a&gt; with some new features and bug fixes. These updates have also set the stage for the entire script to be wrapped with a GUI! Here is the initial release of the Mailbox Audit Report GUI for your auditing needs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Enhanced Remote Server Connectivity Testing With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/06/25/enhanced-remote-server-connectivity-testing-with-powershell/</link>
      <pubDate>Tue, 25 Jun 2013 14:22:18 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/25/enhanced-remote-server-connectivity-testing-with-powershell/</guid>
      <description>&lt;p&gt;Test the following connectivity methods to a server: RDP, ping, rpc, wsman, sccm agent, scom agent, and remote registry. Optionally an alternate credential can be used. Versatility is added with options to return only true/false when singular tests are performed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use Powershell to Gather Disk/Partition/Mount Point Information</title>
      <link>https://zacharyloeber.com/blog/2013/06/23/use-powershell-to-gather-diskpartitionmount-point-information/</link>
      <pubDate>Mon, 24 Jun 2013 04:41:01 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/23/use-powershell-to-gather-diskpartitionmount-point-information/</guid>
      <description>&lt;p&gt;I put together a function for remotely gathering Windows disk information. This was specifically written to accommodate alternate credentials. This script also accounts for the glaring disconnect between win32_Volume and win32_DiskDrive within WMI.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Audit User Profile Folders With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/06/21/audit-user-profile-folders-with-powershell/</link>
      <pubDate>Fri, 21 Jun 2013 18:46:09 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/21/audit-user-profile-folders-with-powershell/</guid>
      <description>&lt;p&gt;This function will aggregate sub-folders within a folder on a server and attempt to associate them with user IDs within a domain and provide additional information. This script can also be used to move folders for disabled or non-existent accounts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Book Review: PowerShell 3.0 Advanced Administration Handbook</title>
      <link>https://zacharyloeber.com/blog/2013/06/18/book-review-powershell-3-0-advanced-administration-handbook/</link>
      <pubDate>Wed, 19 Jun 2013 01:44:40 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/18/book-review-powershell-3-0-advanced-administration-handbook/</guid>
      <description>&lt;p&gt;A fast-paced PowerShell guide with real-world scenarios and detailed solutions&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use Powershell to Create a Windows Service Dependency Diagrams</title>
      <link>https://zacharyloeber.com/blog/2013/06/17/use-powershell-to-create-a-windows-service-dependency-diagrams/</link>
      <pubDate>Mon, 17 Jun 2013 15:32:42 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/17/use-powershell-to-create-a-windows-service-dependency-diagrams/</guid>
      <description>&lt;p&gt;I use powershell with graphviz to generate color coded service dependency diagrams for windows services. Besides creating useful and beautiful diagrams for your environment, this will also provide some interesting functions for gathering remote service information with alternate credentials.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell Utility: Comment Based Help Automater</title>
      <link>https://zacharyloeber.com/blog/2013/06/02/powershell-utility-comment-based-help-automater/</link>
      <pubDate>Sun, 02 Jun 2013 20:05:05 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/06/02/powershell-utility-comment-based-help-automater/</guid>
      <description>&lt;p&gt;Comment based help is used in powershell-land to provide fast and easy help for cmdlets at the console. This little powershell based GUI helps fellow coders automatically construct comment based help blocks for their functions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Colorize-Table.ps1 Updated</title>
      <link>https://zacharyloeber.com/blog/2013/04/28/powershell-colorize-table-ps1-updated/</link>
      <pubDate>Sun, 28 Apr 2013 18:00:43 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/04/28/powershell-colorize-table-ps1-updated/</guid>
      <description>&lt;p&gt;A little while ago I released a script which uses custom linq assemblies to quickly modify an html table based on column header and an arbitrary scriptblock to test the values within that entire column (by default it is a simple -eq comparison). If the scriptblock evaluates to be true then you can either change just the cell style or the entire row style.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Get Calendar Permissions (multilingual edition)</title>
      <link>https://zacharyloeber.com/blog/2013/04/28/exchange-get-calendar-permissions-multilingual-edition/</link>
      <pubDate>Sun, 28 Apr 2013 17:35:54 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/04/28/exchange-get-calendar-permissions-multilingual-edition/</guid>
      <description>&lt;p&gt;Some time ago I released &lt;a href=&#34;http://gallery.technet.microsoft.com/Exchange-2010-Calendar-21695fde&#34; title=&#34;Exchange 2010 Calendar Permission GUI&#34;&gt;a rather simplistic GUI for viewing Exchange 2010 mailbox calendar permissions&lt;/a&gt;. Because of a semi-related script I’m working on currently I rounded back and recreated that GUI script to be a powershell function instead. This is the result.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Colorize-Table Function</title>
      <link>https://zacharyloeber.com/blog/2013/04/17/powershell-colorize-table-function/</link>
      <pubDate>Thu, 18 Apr 2013 03:03:36 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/04/17/powershell-colorize-table-function/</guid>
      <description>&lt;p&gt;Here is a function I modified for quickly modifying the attributes of a table’s rows or individual cells. It uses Linq and is blistering fast. The results are pretty as well so that doesn’t hurt either.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VMware: VMware Report Generation GUI</title>
      <link>https://zacharyloeber.com/blog/2013/02/17/vmware-vmware-report-generation-gui/</link>
      <pubDate>Sun, 17 Feb 2013 17:11:52 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/02/17/vmware-vmware-report-generation-gui/</guid>
      <description>&lt;p&gt;Its been a while since I posted something new. This GUI is meant to configure regular vmware report generation. You are able to select reporting scoped to the whole farm down to individual hosts. Reports can be emailed or saved and be generated based on custom thresholds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010: Poor Mans Monitoring 1.5</title>
      <link>https://zacharyloeber.com/blog/2012/08/27/exchange-2010-poor-mans-monitoring-1-5/</link>
      <pubDate>Tue, 28 Aug 2012 02:40:20 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2012/08/27/exchange-2010-poor-mans-monitoring-1-5/</guid>
      <description>Just a quick upgrade to the script I posted earlier. This script is for monitoring and/or maintaining your Exchange 2010 mailboxes. It is meant to help an admin be proactive in their exchange environment. I updated the script to be a bit more customizable and fixed some obvious issues. The primary changes are removing the requirement for the MS chart controls as well as introducing an area of code just for custom scripts.</description>
    </item>
    
    <item>
      <title>Exchange 2010: Client Access Role Configuration Report</title>
      <link>https://zacharyloeber.com/blog/2012/02/04/exchange-2010-client-access-role-configuration-report/</link>
      <pubDate>Sat, 04 Feb 2012 14:03:29 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2012/02/04/exchange-2010-client-access-role-configuration-report/</guid>
      <description>Ok, so I woke up and was wide awake at 4am this morning. I took it as a sign to lose my mind for a while and get to hacking another script. The result is a client access setting report script which includes all internal and external paths along with their authentication settings. It needs some prettying up and a bit of love but it does exactly what I’ve wanted in Exchange 2010, gives me an overall view of all client access settings (specifically related to IIS).</description>
    </item>
    
  </channel>
</rss>