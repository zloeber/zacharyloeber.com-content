<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PSC on Zachary Loeber</title>
    <link>https://zacharyloeber.com/tags/psc/</link>
    <description>Recent content in PSC on Zachary Loeber</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 12 Sep 2015 20:05:26 +0000</lastBuildDate>
    
	<atom:link href="https://zacharyloeber.com/tags/psc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Skype For Business: Planning for Voice – Part 3</title>
      <link>https://zacharyloeber.com/blog/2015/09/12/skype-for-business-planning-for-voice-part-3/</link>
      <pubDate>Sat, 12 Sep 2015 20:05:26 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/09/12/skype-for-business-planning-for-voice-part-3/</guid>
      <description>&lt;p&gt;If you have been following along this series you already know the importance of getting a recent PSTN provider bill and performing an onsite visit. Next we will go into more depth on how the site PSTN is configured with your PBX at a site. There is lots of ground to cover so lets dive right in!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Skype For Business: Planning for Voice – Part 2</title>
      <link>https://zacharyloeber.com/blog/2015/09/03/skype-for-business-planning-for-voice-part-2/</link>
      <pubDate>Fri, 04 Sep 2015 03:18:40 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/09/03/skype-for-business-planning-for-voice-part-2/</guid>
      <description>&lt;p&gt;I&amp;#8217;ve already gone over the basic phases of a Skype for Business enterprise voice deployment &lt;a href=&#34;https://zacharyloeber.com/2015/08/25/skype-for-business-planning-for-voice-part-1/&#34;&gt;in my prior article&lt;/a&gt;. Now it is time to skip right over the first two of those phases and start preparing to replace your existing PBXs. To prepare you need to know what you are going to be replacing. In this article we will be focusing on beginning the information gathering process.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Skype For Business: Planning for Voice – Part 1</title>
      <link>https://zacharyloeber.com/blog/2015/08/25/skype-for-business-planning-for-voice-part-1/</link>
      <pubDate>Tue, 25 Aug 2015 07:47:39 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/08/25/skype-for-business-planning-for-voice-part-1/</guid>
      <description>&lt;p&gt;When planning for a full Skype for Business voice deployment there are a number of elements which should be aligned and setup properly for a smooth transition. This is an introduction article for a series where I’ll provide some insight on what info you need to collect and understand for a successful PBX replacement within your organization.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell: ASTExplorer</title>
      <link>https://zacharyloeber.com/blog/2015/07/27/powershell-astexplorer/</link>
      <pubDate>Mon, 27 Jul 2015 16:27:55 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/07/27/powershell-astexplorer/</guid>
      <description>&lt;p&gt;So I&amp;#8217;ve been working with PowerShell and abstract syntax trees as of late. Here is a tool I wish I had at my disposal when i started with all this. It takes your script, loads all the AST elements into a treeview, lists properties as each AST element is selected in the treeview, and highlights the portion of the script the element represents.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Login As Batch Job Security Rights</title>
      <link>https://zacharyloeber.com/blog/2015/07/17/powershell-login-as-batch-job-security-rights/</link>
      <pubDate>Sat, 18 Jul 2015 04:09:12 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/07/17/powershell-login-as-batch-job-security-rights/</guid>
      <description>Here is a quick bit of PowerShell. It is some snippets of C# code wrapped up with PowerShell which will allow you to assign accounts to the &amp;#8216;login as batch job&amp;#8217; local security rights of a local machine. The code is no great shakes but it is a good example of how you might take some existing online code and modify to suit your needs in PowerShell. This function also compliments another script I&amp;#8217;ve released in the past for automatically scheduling PowerShell scheduled tasks rather well.</description>
    </item>
    
    <item>
      <title>Lync/S4B Client: Call Forwarding Options Compared</title>
      <link>https://zacharyloeber.com/blog/2015/05/01/lyncs4b-client-call-forwarding-options-compared/</link>
      <pubDate>Fri, 01 May 2015 19:00:48 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/05/01/lyncs4b-client-call-forwarding-options-compared/</guid>
      <description>&lt;p&gt;Here is a comparison chart I put together describing the different call forwarding options available to end users or their teams. This covers everything which can be setup by users in Lync as well as team calling (setup by the admin).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Database Leveling Redux</title>
      <link>https://zacharyloeber.com/blog/2015/04/06/exchange-database-leveling-redux/</link>
      <pubDate>Tue, 07 Apr 2015 00:12:33 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/04/06/exchange-database-leveling-redux/</guid>
      <description>&lt;p&gt;Some time ago I &lt;a href=&#34;https://zacharyloeber.com/2014/01/07/exchange-20102013-database-leveling-script/&#34;&gt;tackled the challenge&lt;/a&gt; of constructing a variant of the bin packing algorithm for leveling out Exchange databases&amp;#8217; size with the least amount of mailbox migrations necessary. Since then, I&amp;#8217;ve been approached by a few people in dreadfully large environments looking for help with errors and compatibility issues around the script I released. I&amp;#8217;ve finally rounded back to this script to do it some justice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync 2013: Scripting QoS Config on Edge Servers</title>
      <link>https://zacharyloeber.com/blog/2015/04/04/lync-2013-scripting-qos-config-on-edge-servers/</link>
      <pubDate>Sat, 04 Apr 2015 21:41:51 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/04/04/lync-2013-scripting-qos-config-on-edge-servers/</guid>
      <description>&lt;p&gt;In many environments the Lync 2013 edge servers are configured in a standalone workgroup without any easy method for setting standard policies (such as GPOs). To make QoS configuration a bit less manual and error prone I&amp;#8217;ve put together this script which can be run in an administrative powershell prompt. It will update the NLA setting (or create it if it doesn&amp;#8217;t already exist), backup and prompt for removal any existing Qos settings, then import the registry settings for Audio, Video, and App QoS settings as defined in the script parameters.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync Client: Automatic Fortune Cookie Utility</title>
      <link>https://zacharyloeber.com/blog/2015/02/08/lync-client-automatic-fortune-cookie-utility/</link>
      <pubDate>Sun, 08 Feb 2015 23:30:30 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/02/08/lync-client-automatic-fortune-cookie-utility/</guid>
      <description>&lt;p&gt;Here&amp;#8217;s a just for fun powershell script for the Lync user. In the not so old days of Unix administration it was not too uncommon to have a &amp;#8216;&lt;a href=&#34;http://en.wikipedia.org/wiki/Fortune_%28Unix%29&#34;&gt;fortune cookie&amp;#8217; display when logging into a system&lt;/a&gt;. I’ve always thought that it would be neat to have something similar in the Lync client that would allow for an easy rotation of your personal note field. Little did I realize how easy it would be to add such functionality myself with some powershell and the Lync SDK!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Get-iQuote</title>
      <link>https://zacharyloeber.com/blog/2015/02/08/powershell-get-iquote/</link>
      <pubDate>Sun, 08 Feb 2015 15:46:49 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/02/08/powershell-get-iquote/</guid>
      <description>&lt;p&gt;While scratching an itch I found a cool little site that has a simple to use REST api for returning random quotes from multiple categories. Here is a small function which utilizes this online source to pull quotes from the web!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync: Local and Site-to-Site Dial Plan GUI Script</title>
      <link>https://zacharyloeber.com/blog/2015/01/12/lync-local-and-site-to-site-dial-plan-gui-script/</link>
      <pubDate>Tue, 13 Jan 2015 02:37:46 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2015/01/12/lync-local-and-site-to-site-dial-plan-gui-script/</guid>
      <description>&lt;p&gt;In a multiple, or even single, site VOIP deployment there are some  steps you can take to make life a whole lot easier on your end users. One of of the common features implemented across phone deployments (VoIP or otherwise) is site local and site-to-site dialing shortcuts. These shortcuts generally reduce the number of digits users have to dial to reach one another. In this post I&amp;#8217;ll go over how you might setup such a dial plan in Lync. First I&amp;#8217;ll go over how you might setup such a plan manually then I&amp;#8217;ll provide a GUI tool to do the same thing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Check For Misplaced Certificates</title>
      <link>https://zacharyloeber.com/blog/2014/12/10/powershell-check-for-misplaced-certificates/</link>
      <pubDate>Thu, 11 Dec 2014 03:02:28 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/12/10/powershell-check-for-misplaced-certificates/</guid>
      <description>&lt;p&gt;Here is a script I absentmindedly put together one evening while power watching a TV series on Netflix with the wife. The general idea of this script is to check local machine, trusted root, and intermediate trusted root stores for misplaced or duplicate certificates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2013: Server Component State Script</title>
      <link>https://zacharyloeber.com/blog/2014/12/08/exchange-2013-server-component-state-script/</link>
      <pubDate>Tue, 09 Dec 2014 01:28:23 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/12/08/exchange-2013-server-component-state-script/</guid>
      <description>&lt;p&gt;Exchange 2013 includes some powershell commands which allow you to set and view several components in the messaging infrastructure. This is important to be aware of as it means all Exchange related services can be running when looking at them in service manager (services.msc) but not actually doing anything. I went ahead put together a script to better gather this information for administrators.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PS Quickie: New-PIN</title>
      <link>https://zacharyloeber.com/blog/2014/10/09/ps-quickie-new-pin/</link>
      <pubDate>Fri, 10 Oct 2014 01:09:09 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/10/09/ps-quickie-new-pin/</guid>
      <description>Setting a bunch of PINs for Lync devices is not difficult at all. Here is a script to pre-generate them should you find the need to do so. The function simply generates random digits between 0 and 9 and convert to a string. An exception is made for the first digit (as zeros are often not displayed in csv files when opened in excel) and only digits 1-9 are used.</description>
    </item>
    
    <item>
      <title>Powershell: System Report Script Design</title>
      <link>https://zacharyloeber.com/blog/2014/10/09/powershell-system-report-script-design/</link>
      <pubDate>Thu, 09 Oct 2014 21:29:24 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/10/09/powershell-system-report-script-design/</guid>
      <description>&lt;p&gt;In this post I go back and explain some of my reasoning behind decisions I made in the design of an already released script, &lt;a href=&#34;https://gallery.technet.microsoft.com/Excel-and-HTML-Asset-0ffbf569&#34;&gt;Get-AssetReport&lt;/a&gt;. This was written over a year ago and forgotten about as one of the many unpublished drafts on my blog. The code behind the script I discuss has been upgraded and used in several of my more popular scripts (&lt;a href=&#34;https://gallery.technet.microsoft.com/Active-Directory-Audit-7754a877&#34;&gt;AD Asset Report&lt;/a&gt;, &lt;a href=&#34;https://gallery.technet.microsoft.com/Big-IP-F5-LTM-Load-3fc9a2af&#34;&gt;F5 LTM Report&lt;/a&gt;, and &lt;a href=&#34;https://gallery.technet.microsoft.com/Lync-2013-Mirrored-SQL-132c2f06&#34;&gt;Lync 2013 Status Report&lt;/a&gt;). Some of this content is slightly dated as I&amp;#8217;ve since changed some of the coding but the core concepts are the same. Those digging through my crazy work or learning powershell may get some value from this content so I tidied it up a bit and here it is. Cheers!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Handling Old Log and Other Files</title>
      <link>https://zacharyloeber.com/blog/2014/09/26/exchange-handling-old-log-and-other-files/</link>
      <pubDate>Fri, 26 Sep 2014 19:41:59 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/09/26/exchange-handling-old-log-and-other-files/</guid>
      <description>In Exchange old logs can really build up fast. Not database transaction logs but rather temporary transport, client access, IIS, and other debug related crap that typically default to locations either on your system drive or Exchange install path. Of course, Powershell scripting can provide a decent solution for this problem.
Introduction More than any other version, Exchange 2013 seems to like logging information to disk. By default, much of what gets logged will not auto-rotate (or if it does, it happens infrequently) either so you end up with this slow ticking time-bomb in your environment.</description>
    </item>
    
    <item>
      <title>Update: Get-CalendarPermission</title>
      <link>https://zacharyloeber.com/blog/2014/09/24/update-get-calendarpermission/</link>
      <pubDate>Wed, 24 Sep 2014 17:43:07 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/09/24/update-get-calendarpermission/</guid>
      <description>&lt;p&gt;Going through older code is a bit like looking through an old yearbook or photo album. If the pictures within are old enough you usually end up laughing at how little you recognize yourself and maybe even marvel a bit at how far you have come. This old function I wrote isn’t the worst of my code but I was still able to update it for measurable improvements.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Receive Connector Tango! – Part 2</title>
      <link>https://zacharyloeber.com/blog/2014/08/23/exchange-receive-connector-tango-part-2/</link>
      <pubDate>Sat, 23 Aug 2014 21:20:31 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/08/23/exchange-receive-connector-tango-part-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zacharyloeber.com/2014/07/06/exchange-receive-connector-tango-part-1/&#34;&gt;In part 1 of this series&lt;/a&gt; I discussed some basic knowledge requirements to get a better grip on receive connectors in Exchange. I continue that conversation with some examples of improperly configured connectors and the issues they may cause. I finish up the discussion with a script you can use to scan your environment for such configurations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Auto Batching 2013 Migrations</title>
      <link>https://zacharyloeber.com/blog/2014/07/28/exchange-auto-batching-2013-migrations/</link>
      <pubDate>Mon, 28 Jul 2014 16:48:24 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/07/28/exchange-auto-batching-2013-migrations/</guid>
      <description>&lt;p&gt;Here is a quick script I put together for automatically creating Exchange 2013 mailbox migration batches. This is useful for the final stages of an Exchange 2013 upgrade among other things.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange Log Level GUI Script</title>
      <link>https://zacharyloeber.com/blog/2014/07/06/exchange-log-level-gui-script/</link>
      <pubDate>Mon, 07 Jul 2014 03:30:20 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/07/06/exchange-log-level-gui-script/</guid>
      <description>&lt;p&gt;I ran into a situation recently where I was forced to amp up the Exchange logging levels to further troubleshoot an issue with some pretty specific Exchange components. I found myself wanting a quick GUI to view and set the levels but found none. So I used this as an opportunity to learn a bit about xaml based GUIs and powershell. The result is this simple, but useful, Exchange log level GUI script which was written for Exchange 2013 but should also run on 2010.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Receive Connector Tango! – Part 1</title>
      <link>https://zacharyloeber.com/blog/2014/07/06/exchange-receive-connector-tango-part-1/</link>
      <pubDate>Mon, 07 Jul 2014 03:25:13 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/07/06/exchange-receive-connector-tango-part-1/</guid>
      <description>&lt;p&gt;Exchange receive connectors are often configured incorrectly or worse, insecurely. This is the first of a two part series about Exchange receive connectors and what to look out for when setting them up.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lync 2013: The Many QoS Settings</title>
      <link>https://zacharyloeber.com/blog/2014/06/01/lync-2013-the-many-qos-settings/</link>
      <pubDate>Sun, 01 Jun 2014 15:13:00 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/06/01/lync-2013-the-many-qos-settings/</guid>
      <description>&lt;p&gt;There are more than a few QoS settings in Lync 2013. Here is a script which should gather most of them in a human readable format for your convenience.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange: Update Distribution Group Managers Script</title>
      <link>https://zacharyloeber.com/blog/2014/04/23/exchange-update-distribution-group-managers-script/</link>
      <pubDate>Thu, 24 Apr 2014 00:26:37 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/04/23/exchange-update-distribution-group-managers-script/</guid>
      <description>&lt;p&gt;A small script to automatically update distribution group owners based on an AD security group.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell Tip – Connecting With ADSI to Another Forest</title>
      <link>https://zacharyloeber.com/blog/2014/04/11/powershell-tip-connecting-with-adsi-to-another-forest/</link>
      <pubDate>Fri, 11 Apr 2014 21:17:43 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/04/11/powershell-tip-connecting-with-adsi-to-another-forest/</guid>
      <description>&lt;p&gt;Using a bit of Powershell and ADSI it is pretty easy to connect to another forest. Finding out how to do so is not very clear though. Here is what I came up with to accomplish this task.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell: Word/Excel Helper Functions</title>
      <link>https://zacharyloeber.com/blog/2014/03/16/powershell-wordexcel-helper-functions/</link>
      <pubDate>Mon, 17 Mar 2014 03:19:39 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/03/16/powershell-wordexcel-helper-functions/</guid>
      <description>&lt;p&gt;Using powershell I wrap up MS Word and Excel COM objects within a custom psobject. This object contains a handful of methods for making docx and xslx creation and manipulation easier.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell Tip: Convert HTML to PDF</title>
      <link>https://zacharyloeber.com/blog/2014/03/07/posh-tip-convert-html-to-pdf/</link>
      <pubDate>Fri, 07 Mar 2014 18:55:35 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/03/07/posh-tip-convert-html-to-pdf/</guid>
      <description>&lt;p&gt;There are no native methods to create a pdf file in Powershell. So I looked into outside sources for converting HTML output to PDF. I ended up using a stand alone dll and some .NET calls to achieve my goal.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell Tip: Save and Load Calculated Property Definitions</title>
      <link>https://zacharyloeber.com/blog/2014/02/09/powershell-tip-save-and-load-calculated-property-definitions/</link>
      <pubDate>Mon, 10 Feb 2014 04:34:49 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/02/09/powershell-tip-save-and-load-calculated-property-definitions/</guid>
      <description>&lt;p&gt;Using Export-CliXML and Import-CliXML (as well as some custom code) you can save calculated properties in a file for later use. Although the need for something like this is rather infrequent the exercise can better familiarize you with multiple Powershell techniques and concepts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell GUI Script Wrapper Utility</title>
      <link>https://zacharyloeber.com/blog/2014/02/02/powershell-gui-script-wrapper-utility/</link>
      <pubDate>Mon, 03 Feb 2014 03:32:39 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/02/02/powershell-gui-script-wrapper-utility/</guid>
      <description>&lt;p&gt;Creating GUIs for your scripts can be a tedious process. That is why I don’t do so for each powershell project I release. Instead of wasting my precious little free time putting together yet another GUI for a one off script I decided to create a tool which will create the GUI scripts for me automatically!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AD Audit Report with Powershell: Part 3</title>
      <link>https://zacharyloeber.com/blog/2014/01/10/ad-audit-report-with-powershell-part-3/</link>
      <pubDate>Sat, 11 Jan 2014 04:16:29 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/01/10/ad-audit-report-with-powershell-part-3/</guid>
      <description>&lt;p&gt;This is my third and final major update to my AD auditing script. This includes a handful of new useful sections such as domain published printers, NPS servers, DHCP servers, as well as SCCM sites and DPs. Other improvements include easier to use script parameters and bug fixes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exchange 2010/2013: Database Leveling Script</title>
      <link>https://zacharyloeber.com/blog/2014/01/07/exchange-20102013-database-leveling-script/</link>
      <pubDate>Tue, 07 Jan 2014 22:08:16 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/01/07/exchange-20102013-database-leveling-script/</guid>
      <description>&lt;p&gt;It is common to randomly choose mailbox databases when creating or migrating user mailboxes in Exchange. I actually recommend this practice unless you are setting up a tiered user/storage environment. Unfortunately this may result in an unequal distribution of data which, in turn, can result in an environment where mailbox databases are wildly different in size. In this post I will discuss an approach to leveling the databases so they are equal in size by moving mailboxes between them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Big-IP F5 LTM Load Balancer Documentation Script with Powershell</title>
      <link>https://zacharyloeber.com/blog/2014/01/03/big-ip-f5-ltm-load-balancer-documentation-script-with-powershell/</link>
      <pubDate>Fri, 03 Jan 2014 18:11:18 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2014/01/03/big-ip-f5-ltm-load-balancer-documentation-script-with-powershell/</guid>
      <description>&lt;p&gt;Here is a script I whipped up to perform a report on your Big-IP LTM load balancers using powershell. The report currently includes the virtual servers, pools, and various bits of status information on both. &lt;a href=&#34;https://devcentral.f5.com/d/microsoft-powershell-with-icontrol&#34;&gt;Big-IP iControl modules&lt;/a&gt; are needed (for obvious reasons).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gather (and Diagram) Installed Roles and Features With Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/12/18/gather-and-diagram-installed-roles-and-features-with-powershell/</link>
      <pubDate>Wed, 18 Dec 2013 18:53:18 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/12/18/gather-and-diagram-installed-roles-and-features-with-powershell/</guid>
      <description>&lt;p&gt;Use this powershell script to gather installed features and roles from remote systems. This uses two wmi classes in an attempt to gather as much information as possible. Win32_ServerFeature will contain roles and their dependencies on systems running Windows 2008 and above. For these systems we can use this hierarchy to also produce pretty diagrams using graphviz and techniques I&amp;#8217;ve exhibited in some of my other scripts (I added this last part in cause it is easy to do, not really certain how useful it is other than maybe exploring the dependencies between windows roles/features).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Charts: Interactive Visualization with Powershell</title>
      <link>https://zacharyloeber.com/blog/2013/12/16/google-charts-interactive-visualization-with-powershell/</link>
      <pubDate>Tue, 17 Dec 2013 02:11:52 +0000</pubDate>
      
      <guid>https://zacharyloeber.com/blog/2013/12/16/google-charts-interactive-visualization-with-powershell/</guid>
      <description>&lt;p&gt;In this script I use powershell to gather system volume information which is then converted into a javascript array. This array is fed into the google charts to create a semi-attractive visualization of server disk space utilization in a single html report. Although this approach is a bit unconventional the results are both fun and useful.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>